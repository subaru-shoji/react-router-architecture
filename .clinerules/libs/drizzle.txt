TITLE: Migrating PostgreSQL Import Paths in Drizzle ORM
DESCRIPTION: This shows the new import paths for PostgreSQL-related modules after the migration to drizzle-orm from version 0.17.0. The examples demonstrate how to update imports for core PostgreSQL functionality, node-postgres, NeonDB, and postgres.js.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.17.0.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
import { ... } from 'drizzle-orm/pg-core'
```

LANGUAGE: typescript
CODE:
```
import { ... } from 'drizzle-orm/node-postgres'
```

LANGUAGE: typescript
CODE:
```
import { ... } from 'drizzle-orm/neon'
```

LANGUAGE: typescript
CODE:
```
import { ... } from 'drizzle-orm/postgres.js'
```

----------------------------------------

TITLE: Type Inference for PostgreSQL Table Models
DESCRIPTION: Shows the usage of new type inference methods ($inferSelect/$inferInsert) and deprecated InferModel alternatives, demonstrating type definition for both select and insert operations on a PostgreSQL table.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.28.3.md#2025-04-11_snippet_1

LANGUAGE: typescript
CODE:
```
import { InferSelectModel, InferInsertModel } from 'drizzle-orm'

const usersTable = pgTable('users', {
  id: serial('id').primaryKey(),
  name: text('name').notNull(),
  verified: boolean('verified').notNull().default(false),
  jsonb: jsonb('jsonb').$type<string[]>(),
  createdAt: timestamp('created_at', { withTimezone: true }).notNull().defaultNow(),
});

type SelectUser = typeof usersTable.$inferSelect;
type InsertUser = typeof usersTable.$inferInsert;

type SelectUser2 = InferSelectModel<typeof usersTable>;
type InsertUser2 = InferInsertModel<typeof usersTable>;
```

----------------------------------------

TITLE: Current PostgreSQL Index API in Drizzle ORM
DESCRIPTION: The updated, correct API for PostgreSQL indexes with support for per-column order specification, SQL expressions, and additional options. The new API provides better alignment with PostgreSQL's documentation.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.31.0-beta.md#2025-04-11_snippet_1

LANGUAGE: typescript
CODE:
```
// First example, with `.on()`
index('name')
  .on(table.column1.asc(), table.column2.nullsFirst(), ...) or .onOnly(table.column1.desc().nullsLast(), table.column2, ...)
  .concurrently()
  .where(sql``)
  .with({ fillfactor: '70' })

// Second Example, with `.using()`
index('name')
  .using('btree', table.column1.asc(), sql`lower(${table.column2})`, table.column1.op('text_ops'))
  .where(sql``) // sql expression
  .with({ fillfactor: '70' })
```

----------------------------------------

TITLE: Defining Database Schema with Relations in TypeScript
DESCRIPTION: This code defines a PostgreSQL database schema with users and posts tables, and establishes relations between them using Drizzle ORM's relations API. The schema defines users with posts (one-to-many) and posts with authors (many-to-one) relationships.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-seed/0.3.0.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
// schema.ts
import { integer, serial, text, pgTable } from 'drizzle-orm/pg-core';
import { relations } from 'drizzle-orm';
export const users = pgTable('users', {
  id: serial('id').primaryKey(),
  name: text('name').notNull(),
});
export const usersRelations = relations(users, ({ many }) => ({
  posts: many(posts),
}));
export const posts = pgTable('posts', {
  id: serial('id').primaryKey(),
  content: text('content').notNull(),
  authorId: integer('author_id').notNull(),
});
export const postsRelations = relations(posts, ({ one }) => ({
  author: one(users, { fields: [posts.authorId], references: [users.id] }),
}));
```

----------------------------------------

TITLE: Installing Drizzle ORM with Postgres.js Dependencies
DESCRIPTION: Commands for installing required packages using different package managers (npm, yarn, pnpm). Includes both runtime dependencies (drizzle-orm, postgres) and development dependencies (drizzle-kit).
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/drizzle-orm/src/postgres-js/README.md#2025-04-11_snippet_0

LANGUAGE: bash
CODE:
```
# npm
npm i drizzle-orm postgres
npm i -D drizzle-kit

# yarn
yarn add drizzle-orm postgres
yarn add -D drizzle-kit

# pnpm
pnpm add drizzle-orm postgres
pnpm add -D drizzle-kit
```

----------------------------------------

TITLE: Implementing Custom Schema for Enums in Postgres with Drizzle ORM
DESCRIPTION: This snippet demonstrates how to create a custom schema and define an enum within that schema using Drizzle ORM for PostgreSQL. It utilizes the 'pgSchema' function to create a schema named 'mySchema' and then defines a 'colors' enum within it.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.30.7-preview.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
import { pgSchema } from 'drizzle-orm/pg-core';

const mySchema = pgSchema('mySchema');
const colors = mySchema.enum('colors', ['red', 'green', 'blue']);
```

----------------------------------------

TITLE: Overriding Postgres.js Date Parsers in TypeScript
DESCRIPTION: This code snippet demonstrates how to override the default date parsers in postgres.js. It sets a transparent parser for specific PostgreSQL data types to ensure consistent string representation of dates.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.30.0.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
const transparentParser = (val: any) => val;

// Override postgres.js default date parsers: https://github.com/porsager/postgres/discussions/761
for (const type of ['1184', '1082', '1083', '1114']) {
	client.options.parsers[type as any] = transparentParser;
	client.options.serializers[type as any] = transparentParser;
}
```

----------------------------------------

TITLE: SQL Index Expression Behavior Comparison
DESCRIPTION: Comparison of the SQL index expression behavior before and after the update. Shows how expressions are now properly mapped to SQL without escaping the expression itself, while still escaping column names.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.31.0.md#2025-04-11_snippet_10

LANGUAGE: sql
CODE:
```
-- before
CREATE UNIQUE INDEX `emailUniqueIndex` ON `users` (`lower("users"."email")`);

-- now
CREATE UNIQUE INDEX `emailUniqueIndex` ON `users` (lower("email"));
```

----------------------------------------

TITLE: Setting Up Migrations with Postgres Proxy (TypeScript)
DESCRIPTION: Configures migrations using the Postgres Proxy. It sends an array of migration queries to the proxy server for execution. The user is responsible for implementing commit or rollback logic on the server side.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/examples/pg-proxy/README.md#2025-04-11_snippet_1

LANGUAGE: typescript
CODE:
```
import axios from 'axios';
import { migrate } from 'drizzle-orm/pg-proxy/migrator';

await migrate(db, async (queries) => {
  try {
    await axios.post('http://localhost:3000/migrate', { queries });
  } catch (e) {
    console.log(e);
    throw Error('Proxy server cannot run migrations');
  }
}, { migrationsFolder: 'drizzle' });
```

----------------------------------------

TITLE: Implementing Proxy Server for Drizzle ORM Postgres Proxy (TypeScript)
DESCRIPTION: Demonstrates a simple Express.js server implementation that acts as a proxy for Drizzle ORM database operations. It handles both query execution and migrations, communicating with a PostgreSQL database using the 'pg' client.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/examples/pg-proxy/README.md#2025-04-11_snippet_2

LANGUAGE: typescript
CODE:
```
import { Client } from 'pg';
import express from 'express';

const app = express();
app.use(express.json());
const port = 3000;

const client = new Client('postgres://postgres:postgres@localhost:5432/postgres');

app.post('/query', async (req, res) => {
	const { sql: sqlBody, params, method } = req.body;

	if (method === 'all') {
		try {
            const result = await client.query({
                text: sqlBody,
                values: params,
                rowMode: 'array',
            });
			res.send(result.rows);
		} catch (e: any) {
			res.status(500).json({ error: e });
		}
	} else if (method === 'execute') {
		try {
            const result = await client.query({
                text: sqlBody,
                values: params,
            });

			res.send(result.rows);
		} catch (e: any) {
			res.status(500).json({ error: e });
		}
	} else {
		res.status(500).json({ error: 'Unknown method value' });
	}
});

app.post('/migrate', async (req, res) => {
	const { queries } = req.body;

    await client.query('BEGIN');
    try {
        for (const query of queries) {
            await client.query(query);
        }
        await client.query('COMMIT');
    } catch {
        await client.query('ROLLBACK');
    }

	res.send({});
});

app.listen(port, () => {
	console.log(`Example app listening on port ${port}`);
});
```

----------------------------------------

TITLE: Implementing UNIQUE Constraints in PostgreSQL with Drizzle ORM
DESCRIPTION: Examples of defining single-column and multi-column unique constraints in PostgreSQL tables with Drizzle ORM. PostgreSQL supports the NULLS NOT DISTINCT option to allow multiple NULL values in unique columns.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.27.2.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
// single column
const table = pgTable('table', {
  id: serial('id').primaryKey(),
  name: text('name').notNull().unique(),
  state: char('state', { length: 2 }).unique('custom'),
  field: char('field', { length: 2 }).unique('custom_field', { nulls: 'not distinct' }),
});
// multiple columns
const table = pgTable('table', {
  id: serial('id').primaryKey(),
  name: text('name').notNull(),
  state: char('state', { length: 2 }),
}, (t) => ({
  first: unique('custom_name').on(t.name, t.state).nullsNotDistinct(),
  second: unique('custom_name1').on(t.name, t.state),
}));
```

----------------------------------------

TITLE: Setting Custom Schema for PostgreSQL Migrations
DESCRIPTION: Shows how to configure a custom schema for PostgreSQL migrations instead of using the default 'drizzle' schema. This feature is PostgreSQL-specific and provides more control over database organization.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.29.5.md#2025-04-11_snippet_3

LANGUAGE: typescript
CODE:
```
await migrate(db, {
	migrationsFolder: './drizzle',
	migrationsSchema: 'custom',
});
```

----------------------------------------

TITLE: Seeding a Postgres Database with Users Using Drizzle ORM
DESCRIPTION: This example demonstrates how to seed a PostgreSQL database with 10 random users. It defines a users table with id and name columns, then uses the seed function to populate the table with random data.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-seed/0.1.1.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
import { pgTable, integer, text } from "drizzle-orm/pg-core";
import { drizzle } from "drizzle-orm/node-postgres";
import { seed } from "drizzle-seed";

const users = pgTable("users", {
  id: integer().primaryKey(),
  name: text().notNull(),
});

async function main() {
  const db = drizzle(process.env.DATABASE_URL!);
  await seed(db, { users });
}

main();
```

----------------------------------------

TITLE: PostgreSQL Distinct On Clause Implementation
DESCRIPTION: Demonstrates PostgreSQL-specific distinct on clause usage with single and multiple columns
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.27.0.md#2025-04-11_snippet_2

LANGUAGE: typescript
CODE:
```
await db.selectDistinctOn([usersDistinctTable.id]).from(usersDistinctTable).orderBy(
  usersDistinctTable.id,
);

await db.selectDistinctOn([usersDistinctTable.name], { name: usersDistinctTable.name }).from(
  usersDistinctTable,
).orderBy(usersDistinctTable.name);
```

----------------------------------------

TITLE: Initializing Drizzle ORM with Vercel Postgres
DESCRIPTION: Shows how to initialize a Drizzle ORM instance with Vercel Postgres SQL client. The example demonstrates importing required dependencies and creating a database connection instance that can be used for queries.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.25.4.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
import { drizzle } from 'drizzle-orm/vercel-postgres';
import { sql } from "@vercel/postgres";

const db = drizzle(sql);

db.select(...)
```

----------------------------------------

TITLE: Implementing Views in DrizzleORM PostgreSQL
DESCRIPTION: Shows how to create both regular and materialized views in PostgreSQL using DrizzleORM. Includes table definition with check constraint and two different view implementations.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-kit/0.26.0.md#2025-04-11_snippet_2

LANGUAGE: typescript
CODE:
```
import { sql } from "drizzle-orm";
import {
  check,
  pgMaterializedView,
  pgTable,
  pgView,
} from "drizzle-orm/pg-core";

export const users = pgTable(
  "users",
  (c) => ({
    id: c.uuid().defaultRandom().primaryKey(),
    username: c.text().notNull(),
    age: c.integer(),
  }),
  (table) => ({
    checkConstraint: check("age_check", sql`${table.age} > 21`),
  })
);

export const simpleView = pgView("simple_users_view").as((qb) =>
  qb.select().from(users)
);

export const materializedView = pgMaterializedView(
  "materialized_users_view"
).as((qb) => qb.select().from(users));
```

----------------------------------------

TITLE: Previous PostgreSQL Index API in Drizzle ORM
DESCRIPTION: The old API for defining PostgreSQL indexes in Drizzle ORM which was incorrect and not aligned with PostgreSQL documentation. It lacked support for SQL expressions inside .on and had incorrect implementation of .using and .on.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.31.0-beta.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
// Index declaration reference
index('name')
  .on(table.column1, table.column2, ...) or .onOnly(table.column1, table.column2, ...)
  .concurrently()
  .using(sql``) // sql expression
  .asc() or .desc()
  .nullsFirst() or .nullsLast()
  .where(sql``) // sql expression
```

----------------------------------------

TITLE: Retrieving Table Configuration Using getTableConfig in Drizzle ORM
DESCRIPTION: This snippet demonstrates how to use the getTableConfig utility function to extract comprehensive information about a PostgreSQL table definition, including columns, indexes, foreign keys, checks, primary keys, and table name/schema.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/docs/table-introspect-api.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
import { pgTable, getTableConfig } from 'drizzle-orm/pg-core';

const table = pgTable(...);

const {
  columns,
  indexes,
  foreignKeys,
  checks,
  primaryKeys,
  name,
  schema,
} = getTableConfig(table);
```

----------------------------------------

TITLE: Defining Custom Text Type in PostgreSQL
DESCRIPTION: Creates a custom Text type for PostgreSQL. This type is used for storing variable-length character strings.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/docs/custom-types.lite.md#2025-04-11_snippet_1

LANGUAGE: typescript
CODE:
```
const customText = customType<{ data: string }>({
  dataType() {
    return 'text';
  },
});
```

----------------------------------------

TITLE: Defining Custom Boolean Type in PostgreSQL
DESCRIPTION: Creates a custom Boolean type for PostgreSQL. This type is used for storing true/false values.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/docs/custom-types.lite.md#2025-04-11_snippet_2

LANGUAGE: typescript
CODE:
```
const customBoolean = customType<{ data: boolean }>({
  dataType() {
    return 'boolean';
  },
});
```

----------------------------------------

TITLE: Defining Custom Serial Type in PostgreSQL
DESCRIPTION: Creates a custom Serial type for PostgreSQL using the customType function. This type is typically used for auto-incrementing primary key columns.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/docs/custom-types.lite.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
const customSerial = customType<{ data: number; notNull: true; default: true }>(
  {
    dataType() {
      return 'serial';
    },
  },
);
```

----------------------------------------

TITLE: Defining PostgreSQL Sequences with various configurations
DESCRIPTION: Shows how to create PostgreSQL sequences with different parameters including custom schemas, start values, min/max values, cycling, caching, and increments.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.32.0.md#2025-04-11_snippet_2

LANGUAGE: typescript
CODE:
```
import { pgSchema, pgSequence } from "drizzle-orm/pg-core";

// No params specified
export const customSequence = pgSequence("name");

// Sequence with params
export const customSequence = pgSequence("name", {
      startWith: 100,
      maxValue: 10000,
      minValue: 100,
      cycle: true,
      cache: 10,
      increment: 2
});

// Sequence in custom schema
export const customSchema = pgSchema('custom_schema');

export const customSequence = customSchema.sequence("name");
```

----------------------------------------

TITLE: Running Database Migrations with Drizzle ORM
DESCRIPTION: Configuration for running database migrations using Drizzle ORM. Shows how to create a dedicated connection for migrations with the required max:1 setting for postgres.js.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/drizzle-orm/src/postgres-js/README.md#2025-04-11_snippet_2

LANGUAGE: typescript
CODE:
```
import postgres from 'postgres';
import { migrate } from 'drizzle-orm/postgres-js/migrator';

const migrationsClient = postgres(connectionString, {
  max: 1,
});
const db = drizzle(migrationsClient);
await migrate(db, { migrationsFolder: '...' });
```

----------------------------------------

TITLE: Establishing Database Connection with Drizzle ORM
DESCRIPTION: Basic setup for creating a database connection using Postgres.js client with Drizzle ORM wrapper. Demonstrates how to initialize the database instance for querying.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/drizzle-orm/src/postgres-js/README.md#2025-04-11_snippet_1

LANGUAGE: typescript
CODE:
```
import { drizzle } from 'drizzle-orm/postgres-js';
import postgres from 'postgres';

const client = postgres(connectionString);
const db = drizzle(client);
```

----------------------------------------

TITLE: Complete PostgreSQL Text Type Implementation
DESCRIPTION: Full implementation of a PostgreSQL text data type including builder, column class, and factory function.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/docs/custom-types.md#2025-04-11_snippet_4

LANGUAGE: typescript
CODE:
```
import { ColumnConfig, ColumnBuilderConfig } from 'drizzle-orm';
import { AnyPgTable } from 'drizzle-orm/pg-core';

import { PgColumn, PgColumnBuilder } from './common';

export class PgTextBuilder<TData extends string = string>
  extends PgColumnBuilder<
    ColumnBuilderConfig<{ data: TData; driverParam: string }>
  >
{
  

  build<TTableName extends string>(
    table: AnyPgTable<{ name: TTableName }>,
  ): PgText<TTableName, TData> {
    return new PgText(table, this.config);
  }
}

export class PgText<TTableName extends string, TData extends string>
  extends PgColumn<
    ColumnConfig<{ tableName: TTableName; data: TData; driverParam: string }>
  >
{
  

  constructor(
    table: AnyPgTable<{ name: TTableName }>,
    builder: PgTextBuilder<TData>['config'],
  ) {
    super(table, builder);
  }

  getSQLType(): string {
    return 'text';
  }
}

export function text<T extends string = string>(
  name: string,
): PgTextBuilder<T> {
  return new PgTextBuilder(name);
}
```

----------------------------------------

TITLE: Updating Import Paths for Drizzle ORM Drivers
DESCRIPTION: These import path changes are required to avoid bundling errors in the Drizzle ORM library. The Postgres.js driver import path has been renamed from 'drizzle-orm/postgres.js' to 'drizzle-orm/postgres-js', and the SQL.js driver import path has been renamed from 'drizzle-orm/sql.js' to 'drizzle-orm/sql-js'.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.18.0.md#2025-04-11_snippet_0

LANGUAGE: markdown
CODE:
```
- `drizzle-orm/postgres.js` -> `drizzle-orm/postgres-js`
- `drizzle-orm/sql.js` -> `drizzle-orm/sql-js`
```

----------------------------------------

TITLE: Using OVERRIDING SYSTEM VALUE API for PostgreSQL Identity Columns
DESCRIPTION: Shows how to force custom values for GENERATED ALWAYS AS IDENTITY columns in PostgreSQL using the overridingSystemValue() method with the insert operation.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.36.4.md#2025-04-11_snippet_3

LANGUAGE: typescript
CODE:
```
await db.insert(identityColumnsTable).overridingSystemValue().values([
  { alwaysAsIdentity: 2 },
]);
```

----------------------------------------

TITLE: Defining PostgreSQL Sequences in TypeScript
DESCRIPTION: Demonstrates how to create PostgreSQL sequences with various parameters and in custom schemas using Drizzle ORM.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.32.0-beta.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
import { pgSchema, pgSequence } from "drizzle-orm/pg-core";

// No params specified
export const customSequence = pgSequence("name");

// Sequence with params
export const customSequence = pgSequence("name", {
      startWith: 100,
      maxValue: 10000,
      minValue: 100,
      cycle: true,
      cache: 10,
      increment: 2
});

// Sequence in custom schema
export const customSchema = pgSchema('custom_schema');

export const customSequence = customSchema.sequence("name");
```

----------------------------------------

TITLE: PostgreSQL CITEXT Custom Type Implementation
DESCRIPTION: Implementation of a custom CITEXT data type for PostgreSQL including builder and column classes.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/docs/custom-types.md#2025-04-11_snippet_5

LANGUAGE: typescript
CODE:
```
export class PgCITextBuilder<TData extends string = string> extends PgColumnBuilder<
  PgColumnBuilderHKT,
  ColumnBuilderConfig<{ data: TData; driverParam: string }>
> {
  protected $pgColumnBuilderBrand: string = 'PgCITextBuilder';
  
  build<TTableName extends string>(table: AnyPgTable<{ name: TTableName }>): PgCIText<TTableName, TData> {
    return new PgCIText(table, this.config);
  }
}

export class PgCIText<TTableName extends string, TData extends string>
  extends PgColumn<PgColumnHKT, ColumnConfig<{ tableName: TTableName; data: TData; driverParam: string }>>
{
  

  constructor(table: AnyPgTable<{ name: TTableName }>, builder: PgCITextBuilder<TData>['config']) {
    super(table, builder);
  }

  getSQLType(): string {
    return 'citext';
  }
}

export function citext<T extends string = string>(name: string): PgCITextBuilder<T> {
  return new PgCITextBuilder(name);
}
```

----------------------------------------

TITLE: Implementing SELECT FOR Locking Clauses in PostgreSQL with Drizzle ORM
DESCRIPTION: Demonstrates how to use various locking clauses with SELECT statements in PostgreSQL using Drizzle ORM. Includes examples of FOR UPDATE, FOR NO KEY UPDATE, and FOR SHARE with options like skipLocked and noWait.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.20.3.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
await db
  .select()
  .from(users)
  .for('update')
  .for('no key update', { of: users })
  .for('no key update', { of: users, skipLocked: true })
  .for('share', { of: users, noWait: true });
```

----------------------------------------

TITLE: PostgreSQL Array Support in TypeScript
DESCRIPTION: Illustrates the syntax for defining PostgreSQL array data types and their corresponding Valibot schemas. It shows how to specify array length in the schema.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-valibot/0.3.0.md#2025-04-11_snippet_2

LANGUAGE: typescript
CODE:
```
pg.dataType().array(...);

// Schema
z.array(baseDataTypeSchema).length(size);
```

----------------------------------------

TITLE: Defining Simple Generated Columns in PostgreSQL
DESCRIPTION: Shows how to create simple generated columns in PostgreSQL using Drizzle ORM with SQL templates and string literals.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.32.0-beta.md#2025-04-11_snippet_3

LANGUAGE: typescript
CODE:
```
export const users = pgTable("users", {
  id: integer("id"),
  name: text("name"),
  generatedName: text("gen_name").generatedAlwaysAs(sql`hello world!`),
  generatedName1: text("gen_name1").generatedAlwaysAs("hello world!"),
}),
```

----------------------------------------

TITLE: Defining PostgreSQL Indexes in Drizzle ORM
DESCRIPTION: Examples of the new API for defining PostgreSQL indexes in Drizzle ORM, including support for expressions, ordering, and index options.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.31.0.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
// First example, with `.on()`
index('name')
  .on(table.column1.asc(), table.column2.nullsFirst(), ...) or .onOnly(table.column1.desc().nullsLast(), table.column2, ...)
  .concurrently()
  .where(sql``)
  .with({ fillfactor: '70' })

// Second Example, with `.using()`
index('name')
  .using('btree', table.column1.asc(), sql`lower(${table.column2})`, table.column1.op('text_ops'))
  .where(sql``) // sql expression
  .with({ fillfactor: '70' })
```

----------------------------------------

TITLE: Enabling RLS on a PostgreSQL Table with Drizzle ORM
DESCRIPTION: This snippet demonstrates how to enable Row-Level Security on a PostgreSQL table using Drizzle ORM's pgTable function with the enableRLS method.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-kit/0.27.0.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
import { integer, pgTable } from 'drizzle-orm/pg-core';

export const users = pgTable('users', {
	id: integer(),
}).enableRLS();
```

----------------------------------------

TITLE: PostgreSQL Table Definition with Foreign Key (New Syntax)
DESCRIPTION: Example demonstrating the new simplified syntax for defining foreign keys in Drizzle ORM PostgreSQL tables, where the callback function is removed.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm-pg/0.15.0.md#2025-04-11_snippet_1

LANGUAGE: typescript
CODE:
```
export const usersTable = pgTable(
	'users_table',
	{
		id: serial('id').primaryKey(),
		uuid: uuid('uuid').defaultRandom().notNull(),
		homeCity: integer('home_city').notNull()
	},
	(users) => ({
		// foreignKey doesn't have a callback as param
		usersCityFK: foreignKey({ columns: [users.homeCity], foreignColumns: [cities.id] }),
	}),
);
```

----------------------------------------

TITLE: Implementing RLS on PostgreSQL Views with Drizzle ORM
DESCRIPTION: This code demonstrates how to specify RLS policies on PostgreSQL views using Drizzle ORM, including the use of security_invoker in the view's WITH options.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-kit/0.27.0.md#2025-04-11_snippet_4

LANGUAGE: typescript
CODE:
```
...

export const roomsUsersProfiles = pgView("rooms_users_profiles")
  .with({
    securityInvoker: true,
  })
  .as((qb) =>
    qb
      .select({
        ...getTableColumns(roomsUsers),
        email: profiles.email,
      })
      .from(roomsUsers)
      .innerJoin(profiles, eq(roomsUsers.userId, profiles.id))
  );
```

----------------------------------------

TITLE: Implementing Database Transactions with node-postgres in Drizzle ORM
DESCRIPTION: This example demonstrates how to use transaction support in Drizzle ORM with node-postgres. It shows insertion, update, and deletion operations within a single transaction, ensuring they're executed atomically.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.23.9.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
await db.transaction(async (tx) => {
  await tx.insert(users).values(newUser);
  await tx.update(users).set({ name: 'Mr. Dan' }).where(eq(users.name, 'Dan'));
  await tx.delete(users).where(eq(users.name, 'Dan'));
});
```

----------------------------------------

TITLE: Creating Vector Indexes for L2, Inner Product, and Cosine Distance
DESCRIPTION: Example of creating HNSW indexes for vector columns in PostgreSQL using Drizzle ORM with different distance measures: L2 distance, Inner product, and Cosine distance.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.31.0-beta.md#2025-04-11_snippet_2

LANGUAGE: typescript
CODE:
```
// CREATE INDEX ON items USING hnsw (embedding vector_l2_ops);
// CREATE INDEX ON items USING hnsw (embedding vector_ip_ops);
// CREATE INDEX ON items USING hnsw (embedding vector_cosine_ops);

const table = pgTable('items', {
    embedding: vector('embedding', { dimensions: 3 })
}, (table) => ({
    l2: index('l2_index').using('hnsw', table.embedding.op('vector_l2_ops'))
    ip: index('ip_index').using('hnsw', table.embedding.op('vector_ip_ops'))
    cosine: index('cosine_index').using('hnsw', table.embedding.op('vector_cosine_ops'))
}))
```

----------------------------------------

TITLE: Initializing Drizzle ORM with PGlite Driver
DESCRIPTION: Example of how to initialize and use Drizzle ORM with the PGlite driver. It shows creating an in-memory Postgres instance and executing a simple query. PGlite enables running Postgres in browser, Node.js, or Bun environments.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.30.6.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
import { PGlite } from '@electric-sql/pglite';
import { drizzle } from 'drizzle-orm/pglite';

// In-memory Postgres
const client = new PGlite();
const db = drizzle(client);

await db.select().from(users);
```

----------------------------------------

TITLE: Defining PostgreSQL Table Schema for Drizzle ORM
DESCRIPTION: Demonstrates how to define a PostgreSQL table schema using Drizzle ORM. This schema will be affected by the new changes in string generators.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-seed/0.2.1.md#2025-04-11_snippet_6

LANGUAGE: typescript
CODE:
```
// schema.ts
import * as p from 'drizzle-orm/pg-core'

export const table = p.pgTable('table', {
  column1: p.text(),
  column2: p.varchar(),
  column3: p.char()
});

// index.ts
...
// this will be affected with new changes
await seed(db, { table });
```

----------------------------------------

TITLE: Converting Stringified JSON to Native JSON Objects
DESCRIPTION: SQL query to convert stringified JSON values to proper JSON objects in PostgreSQL. This query handles basic JSON object and array conversions.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.33.0.md#2025-04-11_snippet_1

LANGUAGE: sql
CODE:
```
update table_name
set json_column = (json_column #>> '{}')::json;
```

----------------------------------------

TITLE: Creating Vector Indexes for L1, Hamming, and Jaccard Distance
DESCRIPTION: Example of creating HNSW indexes for vector columns in PostgreSQL using Drizzle ORM with distance measures added in pg_vector 0.7.0: L1 distance, Hamming distance, and Jaccard distance.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.31.0-beta.md#2025-04-11_snippet_3

LANGUAGE: typescript
CODE:
```
// CREATE INDEX ON items USING hnsw (embedding vector_l1_ops);
// CREATE INDEX ON items USING hnsw (embedding bit_hamming_ops);
// CREATE INDEX ON items USING hnsw (embedding bit_jaccard_ops);

const table = pgTable('table', {
    embedding: vector('embedding', { dimensions: 3 })
}, (table) => ({
    l1: index('l1_index').using('hnsw', table.embedding.op('vector_l1_ops'))
    hamming: index('hamming_index').using('hnsw', table.embedding.op('bit_hamming_ops'))
    bit: index('bit_jaccard_index').using('hnsw', table.embedding.op('bit_jaccard_ops'))
}))
```

----------------------------------------

TITLE: Accessing Table Columns Map Using getTableColumns in Drizzle ORM
DESCRIPTION: This snippet shows how to use the getTableColumns utility function to extract a map of column objects from a PostgreSQL table definition. The returned object contains column definitions indexed by their names.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/docs/table-introspect-api.md#2025-04-11_snippet_1

LANGUAGE: typescript
CODE:
```
import { pgTable, getTableColumns } from 'drizzle-orm/pg-core';

const table = pgTable('table', {
  id: integer('id').primaryKey(),
  name: text('name'),
});

const columns/*: { id: ..., name: ... } */ = getTableColumns(table);
```

----------------------------------------

TITLE: Defining Custom JSONB Type in PostgreSQL
DESCRIPTION: Creates a custom JSONB type for PostgreSQL. This type allows storing JSON data in a binary format, which can be indexed and searched efficiently.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/docs/custom-types.lite.md#2025-04-11_snippet_3

LANGUAGE: typescript
CODE:
```
const customJsonb = <TData>(name: string) =>
  customType<{ data: TData; driverData: string }>({
    dataType() {
      return 'jsonb';
    },
    toDriver(value: TData): string {
      return JSON.stringify(value);
    },
  })(name);
```

----------------------------------------

TITLE: Connecting to PostgreSQL using AWS Data API with Drizzle ORM
DESCRIPTION: This code demonstrates how to establish a connection to PostgreSQL using AWS Data API with Drizzle ORM. It initializes a connection and performs a database migration. Note that the 'interval' data type is not yet properly mapped.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.17.3.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
import { drizzle, migrate } from 'drizzle-orm/aws-data-api/pg';

const rdsClient = new RDSDataClient({});

const db = drizzle(rdsClient, {
  database: '',
  secretArn: '',
  resourceArn: '',
});

await migrate(db, { migrationsFolder: '' });
```

----------------------------------------

TITLE: Enabling RLS on a PostgreSQL Table with Drizzle ORM
DESCRIPTION: This snippet demonstrates how to enable Row-Level Security on a PostgreSQL table using Drizzle ORM. It creates a 'users' table and enables RLS using the .enableRLS() method.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.36.0.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
import { integer, pgTable } from 'drizzle-orm/pg-core';

export const users = pgTable('users', {
	id: integer(),
}).enableRLS();
```

----------------------------------------

TITLE: Implementing PostgreSQL Proxy Driver in Drizzle ORM
DESCRIPTION: This example shows how to implement a custom HTTP driver for PostgreSQL using Drizzle ORM's new proxy driver feature, including query execution and migration handling.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.29.0.md#2025-04-11_snippet_6

LANGUAGE: typescript
CODE:
```
import axios from 'axios';
import { eq } from 'drizzle-orm/expressions';
import { drizzle } from 'drizzle-orm/pg-proxy';
import { migrate } from 'drizzle-orm/pg-proxy/migrator';
import { cities, users } from './schema';

async function main() {
  const db = drizzle(async (sql, params, method) => {
    try {
      const rows = await axios.post(`${process.env.REMOTE_DRIVER}/query`, { sql, params, method });

      return { rows: rows.data };
    } catch (e: any) {
      console.error('Error from pg proxy server:', e.response.data);
      return { rows: [] };
    }
  });

  await migrate(db, async (queries) => {
    try {
      await axios.post(`${process.env.REMOTE_DRIVER}/query`, { queries });
    } catch (e) {
      console.log(e);
      throw new Error('Proxy server cannot run migrations');
    }
  }, { migrationsFolder: 'drizzle' });

  const insertedCity = await db.insert(cities).values({ id: 1, name: 'name' }).returning();
  const insertedUser = await db.insert(users).values({ id: 1, name: 'name', email: 'email', cityId: 1 });
  const usersToCityResponse = await db.select().from(users).leftJoin(cities, eq(users.cityId, cities.id));
}
```

----------------------------------------

TITLE: PostgreSQL Array Operators Usage in Drizzle ORM
DESCRIPTION: Examples of using the new PostgreSQL array operators (arrayContains, arrayContained, arrayOverlaps) to perform array-based filtering in queries, including with subqueries.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.28.6.md#2025-04-11_snippet_5

LANGUAGE: typescript
CODE:
```
const contains = await db.select({ id: posts.id }).from(posts)
	.where(arrayContains(posts.tags, ['Typescript', 'ORM']));

const contained = await db.select({ id: posts.id }).from(posts)
	.where(arrayContained(posts.tags, ['Typescript', 'ORM']));

const overlaps = await db.select({ id: posts.id }).from(posts)
	.where(arrayOverlaps(posts.tags, ['Typescript', 'ORM']));

const withSubQuery = await db.select({ id: posts.id }).from(posts)
	.where(arrayContains(
		posts.tags,
		db.select({ tags: posts.tags }).from(posts).where(eq(posts.id, 1)),
	));
```

----------------------------------------

TITLE: Supporting PostgreSQL Arrays in TypeScript
DESCRIPTION: Demonstrates the support for PostgreSQL arrays in schema creation. It shows how to define array data types and create corresponding schemas with size constraints.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-typebox/0.2.0.md#2025-04-11_snippet_3

LANGUAGE: typescript
CODE:
```
pg.dataType().array(...);

// Schema
Type.Array(baseDataTypeSchema, { minItems: size, maxItems: size });
```

----------------------------------------

TITLE: Implementing PostgreSQL Generated Columns for Full-Text Search
DESCRIPTION: Demonstrates how to create a generated column for tsvector in PostgreSQL using Drizzle ORM, including custom type definition and index creation.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.32.0-beta.md#2025-04-11_snippet_2

LANGUAGE: typescript
CODE:
```
import { SQL, sql } from "drizzle-orm";
import { customType, index, integer, pgTable, text } from "drizzle-orm/pg-core";

const tsVector = customType<{ data: string }>({
  dataType() {
    return "tsvector";
  },
});

export const test = pgTable(
  "test",
  {
    id: integer("id").primaryKey().generatedAlwaysAsIdentity(),
    content: text("content"),
    contentSearch: tsVector("content_search", {
      dimensions: 3,
    }).generatedAlwaysAs(
      (): SQL => sql`to_tsvector('english', ${test.content})`
    ),
  },
  (t) => ({
    idx: index("idx_content_search").using("gin", t.contentSearch),
  })
);
```

----------------------------------------

TITLE: Defining Custom Timestamp Type in PostgreSQL
DESCRIPTION: Creates a custom Timestamp type for PostgreSQL. This type allows storing date and time information with optional timezone and precision configuration.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/docs/custom-types.lite.md#2025-04-11_snippet_4

LANGUAGE: typescript
CODE:
```
const customTimestamp = customType<
  {
    data: Date;
    driverData: string;
    config: { withTimezone: boolean; precision?: number };
  }
>({
  dataType(config) {
    const precision = typeof config.precision !== 'undefined'
      ? ` (${config.precision})`
      : '';
    return `timestamp${precision}${
      config.withTimezone ? ' with time zone' : ''
    }`;
  },
  fromDriver(value: string): Date {
    return new Date(value);
  },
});
```

----------------------------------------

TITLE: Creating PostgreSQL Generated Columns with simple expressions
DESCRIPTION: Demonstrates creating PostgreSQL generated columns with simple SQL templates or string literals when not needing to reference other table columns.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.32.0.md#2025-04-11_snippet_5

LANGUAGE: typescript
CODE:
```
export const users = pgTable("users", {
  id: integer("id"),
  name: text("name"),
  generatedName: text("gen_name").generatedAlwaysAs(sql`hello world!`),
  generatedName1: text("gen_name1").generatedAlwaysAs("hello world!"),
}),
```

----------------------------------------

TITLE: Basic Usage of Drizzle Seed with PostgreSQL
DESCRIPTION: Demonstrates how to create 10 users with random names and IDs using drizzle-seed with a PostgreSQL database. The example shows the basic schema definition and seeding process.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/drizzle-seed/README.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
import { pgTable, integer, text } from "drizzle-orm/pg-core";
import { drizzle } from "drizzle-orm/node-postgres";
import { seed } from "drizzle-seed";

const users = pgTable("users", {
  id: integer().primaryKey(),
  name: text().notNull(),
});

async function main() {
  const db = drizzle(process.env.DATABASE_URL!);
  await seed(db, { users });
}

main();
```

----------------------------------------

TITLE: Converting Stringified JSONB to Native JSONB Objects
DESCRIPTION: SQL query to convert stringified JSONB values to proper JSONB objects in PostgreSQL. This query handles basic JSON object and array conversions.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.33.0.md#2025-04-11_snippet_0

LANGUAGE: sql
CODE:
```
update table_name
set jsonb_column = (jsonb_column #>> '{}')::jsonb;
```

----------------------------------------

TITLE: Returning Columns from Joined Tables in PostgreSQL
DESCRIPTION: Example showing how to return columns from both the updated table and joined tables in PostgreSQL. This query updates users and returns both the user ID and the city name from the cities table.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.36.3.md#2025-04-11_snippet_4

LANGUAGE: typescript
CODE:
```
const updatedUsers = await db
  .update(users)
  .set({ cityId: cities.id })
  .from(cities)
  .returning({ id: users.id, cityName: cities.name });
```

----------------------------------------

TITLE: Defining PostgreSQL Table Schema in TypeScript
DESCRIPTION: A TypeScript example showing how to define a 'users' table schema using Drizzle ORM's PostgreSQL table builder. The schema includes an auto-incrementing ID, a required email field, and an optional name field.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-kit/0.30.1.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
// schema.ts
import { pgTable, serial, text } from 'drizzle-orm/pg-core'

export const users = pgTable('users', {
	id: serial('id').primaryKey(),
	email: text('email').notNull(),
	name: text('name')
});
```

----------------------------------------

TITLE: Importing Migration Functionality in Drizzle ORM for PostgreSQL
DESCRIPTION: This snippet demonstrates the new import statement for migrations functionality, which has been separated into its own module in version 0.14.0.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm-pg/0.14.0.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
import { migrate } from 'drizzle-orm-pg/node/migrate';
```

----------------------------------------

TITLE: Basic Usage of drizzle-seed Package in TypeScript
DESCRIPTION: Demonstrates how to seed a PostgreSQL database with 10 randomly generated users using the drizzle-seed package. The example defines a simple users table and uses the seed function to populate it.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.36.4.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
import { pgTable, integer, text } from "drizzle-orm/pg-core";
import { drizzle } from "drizzle-orm/node-postgres";
import { seed } from "drizzle-seed";

const users = pgTable("users", {
  id: integer().primaryKey(),
  name: text().notNull(),
});

async function main() {
  const db = drizzle(process.env.DATABASE_URL!);
  await seed(db, { users });
}

main();
```

----------------------------------------

TITLE: PostgreSQL Table Definition with Foreign Key (Previous Syntax)
DESCRIPTION: Example showing the previous syntax for defining foreign keys in Drizzle ORM PostgreSQL tables, where foreign key definition required a callback function.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm-pg/0.15.0.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
export const usersTable = pgTable(
	'users_table',
	{
		id: serial('id').primaryKey(),
		uuid: uuid('uuid').defaultRandom().notNull(),
		homeCity: integer('home_city').notNull()
	},
	(users) => ({
		// foreignKey had a callback as param
		usersCityFK: foreignKey(() => ({ columns: [users.homeCity], foreignColumns: [cities.id] })),
	}),
);
```

----------------------------------------

TITLE: Creating PostgreSQL Generated Columns with tsvector for full-text search
DESCRIPTION: Shows how to define PostgreSQL generated columns with a custom tsvector type for full-text search, using SQL expressions that reference other columns in the table.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.32.0.md#2025-04-11_snippet_4

LANGUAGE: typescript
CODE:
```
import { SQL, sql } from "drizzle-orm";
import { customType, index, integer, pgTable, text } from "drizzle-orm/pg-core";

const tsVector = customType<{ data: string }>({{
  dataType() {
    return "tsvector";
  },
}});

export const test = pgTable(
  "test",
  {
    id: integer("id").primaryKey().generatedAlwaysAsIdentity(),
    content: text("content"),
    contentSearch: tsVector("content_search", {
      dimensions: 3,
    }).generatedAlwaysAs(
      (): SQL => sql`to_tsvector('english', ${test.content})`
    ),
  },
  (t) => ({{
    idx: index("idx_content_search").using("gin", t.contentSearch),
  }})
);
```

----------------------------------------

TITLE: Generating and Using Arktype Schemas with Drizzle ORM
DESCRIPTION: This snippet demonstrates how to define a PostgreSQL table with Drizzle ORM and then generate Arktype schemas for data validation. It shows creating insert, update, and select schemas, as well as customizing schemas by overriding or refining fields. The example includes a validation use case.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/drizzle-arktype/README.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
import { pgEnum, pgTable, serial, text, timestamp } from 'drizzle-orm/pg-core';
import { createInsertSchema, createSelectSchema } from 'drizzle-arktype';
import { type } from 'arktype';

const users = pgTable('users', {
	id: serial('id').primaryKey(),
	name: text('name').notNull(),
	email: text('email').notNull(),
	role: text('role', { enum: ['admin', 'user'] }).notNull(),
	createdAt: timestamp('created_at').notNull().defaultNow(),
});

// Schema for inserting a user - can be used to validate API requests
const insertUserSchema = createInsertSchema(users);

// Schema for updating a user - can be used to validate API requests
const updateUserSchema = createUpdateSchema(users);

// Schema for selecting a user - can be used to validate API responses
const selectUserSchema = createSelectSchema(users);

// Overriding the fields
const insertUserSchema = createInsertSchema(users, {
	role: type('string'),
});

// Refining the fields - useful if you want to change the fields before they become nullable/optional in the final schema
const insertUserSchema = createInsertSchema(users, {
	id: (schema) => schema.atLeast(1),
	role: type('string'),
});

// Usage

const isUserValid = parse(insertUserSchema, {
	name: 'John Doe',
	email: 'johndoe@test.com',
	role: 'admin',
});
```

----------------------------------------

TITLE: Creating Custom Schema Enums in PostgreSQL with Drizzle ORM
DESCRIPTION: This snippet demonstrates how to create an enum type within a custom schema in PostgreSQL using Drizzle ORM. It imports the pgSchema function, creates a schema named 'mySchema', and defines a colors enum within that schema.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.30.8.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
import { pgSchema } from 'drizzle-orm/pg-core';

const mySchema = pgSchema('mySchema');
const colors = mySchema.enum('colors', ['red', 'green', 'blue']);
```

----------------------------------------

TITLE: Implementing $onUpdate Functionality in Drizzle ORM with PostgreSQL
DESCRIPTION: Example demonstrating how to use the $onUpdate and $onUpdateFn methods to automatically update column values when rows are modified. The example shows different use cases including incrementing a counter, updating timestamps, and setting values to null.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.30.5.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
const usersOnUpdate = pgTable('users_on_update', {
  id: serial('id').primaryKey(),
  name: text('name').notNull(),
  updateCounter: integer('update_counter').default(sql`1`).$onUpdateFn(() => sql`update_counter + 1`),
  updatedAt: timestamp('updated_at', { mode: 'date', precision: 3 }).$onUpdate(() => new Date()),
  alwaysNull: text('always_null').$type<string | null>().$onUpdate(() => null),
});
```

----------------------------------------

TITLE: PostgreSQL Text Column Implementation
DESCRIPTION: Complete implementation of a PostgreSQL text column class with mapping and SQL type definition.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/docs/custom-types.md#2025-04-11_snippet_3

LANGUAGE: typescript
CODE:
```
export class PgText<TTableName extends string, TData extends string>
  extends PgColumn<ColumnConfig<{ tableName: TTableName; data: TData; driverParam: string }>> {
  

  constructor(table: AnyPgTable<{ name: TTableName }>, builder: PgTextBuilder<TData>['config']) {
    super(table, builder);
  }

  getSQLType(): string {
    return 'text';
  }

  override mapFromDriverValue(value: string): TData {
    return value as TData
  }

  override mapToDriverValue(value: TData): string {
    return value
  }
}
```

----------------------------------------

TITLE: Defining PostgreSQL Geometric Types in Drizzle ORM
DESCRIPTION: Examples of defining and using PostgreSQL geometric types 'point' and 'line' in Drizzle ORM, including different modes for data mapping.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.31.0.md#2025-04-11_snippet_4

LANGUAGE: typescript
CODE:
```
const items = pgTable('items', {
 point: point('point'),
 pointObj: point('point_xy', { mode: 'xy' }),
});

const items = pgTable('items', {
 line: line('line'),
 lineObj: point('line_abc', { mode: 'abc' }),
});
```

----------------------------------------

TITLE: Configuring PostgreSQL SSL Options in Drizzle Kit
DESCRIPTION: Example of defining PostgreSQL database credentials with SSL options in drizzle-kit config. Supports various SSL modes including simple boolean and string options from node:tls.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.31.0.md#2025-04-11_snippet_7

LANGUAGE: typescript
CODE:
```
import { defineConfig } from 'drizzle-kit'

export default defaultConfig({
  dialect: "postgresql",
  dbCredentials: {
    ssl: true, //"require" | "allow" | "prefer" | "verify-full" | options from node:tls
  }
})
```

----------------------------------------

TITLE: Using PostgreSQL Identity Columns as an alternative to serial
DESCRIPTION: Demonstrates how to use identity columns in PostgreSQL as the recommended alternative to the deprecated serial type, allowing for auto-incremented primary keys with custom start values.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.32.0.md#2025-04-11_snippet_3

LANGUAGE: typescript
CODE:
```
import { pgTable, integer, text } from 'drizzle-orm/pg-core' 

export const ingredients = pgTable("ingredients", {
  id: integer("id").primaryKey().generatedAlwaysAsIdentity({ startWith: 1000 }),
  name: text("name").notNull(),
  description: text("description"),
});
```

----------------------------------------

TITLE: Creating PostgreSQL Identity Columns in TypeScript
DESCRIPTION: Shows how to define identity columns in PostgreSQL using Drizzle ORM, which is the recommended approach instead of using serial types.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.32.0-beta.md#2025-04-11_snippet_1

LANGUAGE: typescript
CODE:
```
import { pgTable, integer, text } from 'drizzle-orm/pg-core' 

export const ingredients = pgTable("ingredients", {
  id: integer("id").primaryKey().generatedAlwaysAsIdentity({ startWith: 1000 }),
  name: text("name").notNull(),
  description: text("description"),
});
```

----------------------------------------

TITLE: Defining PostgreSQL Policies with Drizzle ORM
DESCRIPTION: This snippet illustrates how to define PostgreSQL policies within a Drizzle table using the pgPolicy function, including all available properties and linking to existing tables.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-kit/0.27.0.md#2025-04-11_snippet_2

LANGUAGE: typescript
CODE:
```
import { sql } from 'drizzle-orm';
import { integer, pgPolicy, pgRole, pgTable } from 'drizzle-orm/pg-core';

export const admin = pgRole('admin');

export const users = pgTable('users', {
	id: integer(),
}, (t) => [
	pgPolicy('policy', {
		as: 'permissive',
		to: admin,
		for: 'delete',
		using: sql``,
		withCheck: sql``,
	}),
]);
```

LANGUAGE: typescript
CODE:
```
import { sql } from "drizzle-orm";
import { pgPolicy } from "drizzle-orm/pg-core";
import { authenticatedRole, realtimeMessages } from "drizzle-orm/supabase";

export const policy = pgPolicy("authenticated role insert policy", {
  for: "insert",
  to: authenticatedRole,
  using: sql``,
}).link(realtimeMessages);
```

----------------------------------------

TITLE: Using Custom Types in PostgreSQL Table Definition
DESCRIPTION: Demonstrates how to use the custom types defined earlier in a PostgreSQL table definition using Drizzle ORM.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/docs/custom-types.lite.md#2025-04-11_snippet_5

LANGUAGE: typescript
CODE:
```
const usersTable = pgTable('users', {
  id: customSerial('id').primaryKey(),
  name: customText('name').notNull(),
  verified: customBoolean('verified').notNull().default(false),
  jsonb: customJsonb<string[]>('jsonb'),
  createdAt: customTimestamp('created_at', { withTimezone: true }).notNull()
    .default(sql`now()`),
});
```

----------------------------------------

TITLE: Implementing PostgreSQL UUID columns with Drizzle ORM and seed utility
DESCRIPTION: Demonstrates how to define PostgreSQL tables with UUID columns and seed them with data. Shows both automatic seeding and manual refinement of the seeding process with specific UUID generation.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-seed/0.1.3.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
import { pgTable, uuid } from "drizzle-orm/pg-core";
import { drizzle } from "drizzle-orm/node-postgres";
import { seed } from "drizzle-seed";

const users = pgTable("users", {
  uuid: uuid("uuid"),
});

async function main() {
  const db = drizzle(process.env.DATABASE_URL!);
  //  You can let it seed automatically
  //  await seed(db, { users });

  // Alternatively, you can manually specify the generator in refine.
  await seed(db, { users }, { count: 1000 }).refine((funcs) => ({
    users: {
      columns: {
        uuid: funcs.uuid(),
      },
    },
  }));
}

main();
```

----------------------------------------

TITLE: Supporting PostgreSQL Arrays in TypeScript
DESCRIPTION: Demonstrates the full support for PostgreSQL arrays in the drizzle-zod integration. It shows how to define and validate array data types.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-zod/0.6.0.md#2025-04-11_snippet_3

LANGUAGE: typescript
CODE:
```
pg.dataType().array(...);

// Schema
z.array(baseDataTypeSchema).length(size);
```

----------------------------------------

TITLE: Using Updated Interval Unique Generator in Drizzle Seed Function
DESCRIPTION: Demonstrates the usage of the updated interval unique generator (v2). This version addresses issues with interval representation in PostgreSQL databases.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-seed/0.2.1.md#2025-04-11_snippet_4

LANGUAGE: typescript
CODE:
```
await seed(db, { table }).refine((f) => ({
  table: {
    columns: {
      // this function usage will output different values with the same `seed` number from previous version
      column1: f.interval({ isUnique: true }),
    }
  }
}))
```

----------------------------------------

TITLE: Using Updated String Generators in Drizzle Seed Function
DESCRIPTION: Shows the usage of updated string generators (v2) which can generate unique strings based on the length of text columns. This affects PostgreSQL, MySQL, and SQLite databases.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-seed/0.2.1.md#2025-04-11_snippet_5

LANGUAGE: typescript
CODE:
```
await seed(db, { table }).refine((f) => ({
  table: {
    columns: {
      // this function will output different values with the same `seed` number from previous version
      column1: f.string(),
    }
  }
}))
```

----------------------------------------

TITLE: Generated SQL for PostgreSQL Array Types
DESCRIPTION: Shows the SQL generated by Drizzle Kit for tables with array types in PostgreSQL.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.21.0.md#2025-04-11_snippet_1

LANGUAGE: sql
CODE:
```
CREATE TABLE sal_emp (
  name            text,
  pay_by_quarter  integer[],
  schedule        text[][]
);

CREATE TABLE tictactoe (
  squares   integer[3][3]
);
```

----------------------------------------

TITLE: Defining PostgreSQL Array Types in Drizzle ORM
DESCRIPTION: Demonstrates how to define tables with array types in Drizzle ORM for PostgreSQL, including single and multi-dimensional arrays.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.21.0.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
export const salEmp = pgTable('sal_emp', {
  name: text('name').notNull(),
  payByQuarter: integer('pay_by_quarter').array(),
  schedule: text('schedule').array().array(),
});

export const tictactoe = pgTable('tictactoe', {
  squares: integer('squares').array(3).array(3),
});
```

----------------------------------------

TITLE: Defining PostgreSQL Roles in Drizzle ORM
DESCRIPTION: This code shows how to define PostgreSQL roles using Drizzle ORM's pgRole function, including options for creating new roles and marking existing roles.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-kit/0.27.0.md#2025-04-11_snippet_1

LANGUAGE: typescript
CODE:
```
import { pgRole } from 'drizzle-orm/pg-core';

export const admin = pgRole('admin', { createRole: true, createDb: true, inherit: true });
```

LANGUAGE: typescript
CODE:
```
import { pgRole } from 'drizzle-orm/pg-core';

export const admin = pgRole('admin').existing();
```

----------------------------------------

TITLE: Defining Composite Primary Keys in PostgreSQL with Drizzle ORM
DESCRIPTION: Illustrates how to define a table with a composite primary key in PostgreSQL using Drizzle ORM.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.21.0.md#2025-04-11_snippet_2

LANGUAGE: typescript
CODE:
```
import { primaryKey } from 'drizzle-orm/pg-core';

export const cpkTable = pgTable('table', {
  column1: integer('column1').default(10).notNull(),
  column2: integer('column2'),
  column3: integer('column3'),
}, (table) => ({
  cpk: primaryKey(table.column1, table.column2),
}));
```

----------------------------------------

TITLE: Advanced JSON Conversion with Type Checking
DESCRIPTION: SQL query that safely converts stringified JSON values while handling different JSON types including objects, arrays, and primitives.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.33.0.md#2025-04-11_snippet_3

LANGUAGE: sql
CODE:
```
UPDATE table_name
SET json_column = CASE
    -- Convert to JSON if it is a valid JSON object or array
    WHEN json_column #>> '{}' LIKE '{%' OR json_column #>> '{}' LIKE '[%' THEN
        (json_column #>> '{}')::json
    ELSE
        json_column
END
WHERE json_column IS NOT NULL;
```

----------------------------------------

TITLE: Version Update Note in Markdown
DESCRIPTION: Release note indicating version bump to 0.14.2 for drizzle-orm PostgreSQL package and its dependencies.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm-pg/0.14.2.md#2025-04-11_snippet_0

LANGUAGE: markdown
CODE:
```
# drizzle-orm-pg 0.14.2\n\n- Bumped everything to 0.14.2
```

----------------------------------------

TITLE: Creating SQLite Index with Expression
DESCRIPTION: Example of defining a unique index on a lowercased email column in SQLite. This shows the updated index-as-expression behavior that properly maps expressions into SQL queries.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.31.0.md#2025-04-11_snippet_9

LANGUAGE: typescript
CODE:
```
export const users = sqliteTable(
  'users',
  {
    id: integer('id').primaryKey(),
    email: text('email').notNull(),
  },
  (table) => ({
    emailUniqueIndex: uniqueIndex('emailUniqueIndex').on(sql`lower(${table.email})`),
  }),
);
```

----------------------------------------

TITLE: Using drizzle-valibot to Generate Validation Schemas from Drizzle ORM
DESCRIPTION: This example demonstrates how to use the drizzle-valibot plugin to create validation schemas for database operations. It shows the creation of insert, update, and select schemas from a PostgreSQL table definition, including examples of overriding and refining fields, and validating data against the schema.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/drizzle-valibot/README.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
import { pgEnum, pgTable, serial, text, timestamp } from 'drizzle-orm/pg-core';
import { createInsertSchema, createSelectSchema } from 'drizzle-valibot';
import { string, parse, number, pipe } from 'valibot';

const users = pgTable('users', {
	id: serial('id').primaryKey(),
	name: text('name').notNull(),
	email: text('email').notNull(),
	role: text('role', { enum: ['admin', 'user'] }).notNull(),
	createdAt: timestamp('created_at').notNull().defaultNow(),
});

// Schema for inserting a user - can be used to validate API requests
const insertUserSchema = createInsertSchema(users);

// Schema for updating a user - can be used to validate API requests
const updateUserSchema = createUpdateSchema(users);

// Schema for selecting a user - can be used to validate API responses
const selectUserSchema = createSelectSchema(users);

// Overriding the fields
const insertUserSchema = createInsertSchema(users, {
	role: string(),
});

// Refining the fields - useful if you want to change the fields before they become nullable/optional in the final schema
const insertUserSchema = createInsertSchema(users, {
	id: (schema) => pipe([schema, minValue(0)]),
	role: string(),
});

// Usage

const isUserValid = parse(insertUserSchema, {
	name: 'John Doe',
	email: 'johndoe@test.com',
	role: 'admin',
});
```

----------------------------------------

TITLE: Implementing PostgreSQL Text Column Builder
DESCRIPTION: Example implementation of a PostgreSQL text column builder class that extends PgColumnBuilder and handles string data types.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/docs/custom-types.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
export class PgTextBuilder<TData extends string = string>
  extends PgColumnBuilder<
    ColumnBuilderConfig<{ data: TData; driverParam: string }>
  >
{
  

  build<TTableName extends string>(
    table: AnyPgTable<{ name: TTableName }>,
  ): PgText<TTableName, TData> {
    return new PgText(table, this.config);
  }
}
```

----------------------------------------

TITLE: Defining PostgreSQL Policies in Drizzle ORM
DESCRIPTION: This snippet demonstrates how to define PostgreSQL policies within a Drizzle table. It creates a policy for the 'users' table, specifying various options such as the role, action, and conditions.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.36.0.md#2025-04-11_snippet_2

LANGUAGE: typescript
CODE:
```
import { sql } from 'drizzle-orm';
import { integer, pgPolicy, pgRole, pgTable } from 'drizzle-orm/pg-core';

export const admin = pgRole('admin');

export const users = pgTable('users', {
	id: integer(),
}, (t) => [
	pgPolicy('policy', {
		as: 'permissive',
		to: admin,
		for: 'delete',
		using: sql``,
		withCheck: sql``,
	}),
]);
```

----------------------------------------

TITLE: Seeding PostgreSQL array columns with custom array size
DESCRIPTION: Demonstrates how to seed a table with array columns using the refine method to specify a custom array size. This example generates phone number arrays of size 3 for 1000 user records.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-seed/0.1.3.md#2025-04-11_snippet_2

LANGUAGE: typescript
CODE:
```
async function main() {
  const db = drizzle(process.env.DATABASE_URL!);
  await seed(db, { users }, { count: 1000 }).refine((funcs) => ({
    users: {
      columns: {
        phone_numbers: funcs.phoneNumber({ arraySize: 3 }),
      },
    },
  }));
}

main();
```

----------------------------------------

TITLE: Defining PostgreSQL Roles in Drizzle ORM
DESCRIPTION: This snippet shows how to define PostgreSQL roles using Drizzle ORM. It creates an 'admin' role with specific permissions and demonstrates how to mark a role as existing in the database.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.36.0.md#2025-04-11_snippet_1

LANGUAGE: typescript
CODE:
```
import { pgRole } from 'drizzle-orm/pg-core';

export const admin = pgRole('admin', { createRole: true, createDb: true, inherit: true });
```

LANGUAGE: typescript
CODE:
```
import { pgRole } from 'drizzle-orm/pg-core';

export const admin = pgRole('admin').existing();
```

----------------------------------------

TITLE: Defining Tables in Default and Custom Schemas with Drizzle ORM in TypeScript
DESCRIPTION: This code snippet demonstrates how to define tables in both the default schema and a custom schema using Drizzle ORM. It shows the structure for creating table definitions with various column types and constraints.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm-pg/0.15.1.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
// Table in default schema
const publicUsersTable = pgTable('users', {
	id: serial('id').primaryKey(),
	name: text('name').notNull(),
	verified: boolean('verified').notNull().default(false),
	jsonb: jsonb<string[]>('jsonb'),
	createdAt: timestamp('created_at', { withTimezone: true }).notNull().defaultNow(),
});


// Table in custom schema
const mySchema = pgSchema('mySchema');

const usersTable = mySchema('users', {
	id: serial('id').primaryKey(),
	name: text('name').notNull(),
	verified: boolean('verified').notNull().default(false),
	jsonb: jsonb<string[]>('jsonb'),
	createdAt: timestamp('created_at', { withTimezone: true }).notNull().defaultNow(),
});
```

----------------------------------------

TITLE: Implementing cyclic table relationships in Drizzle ORM
DESCRIPTION: Demonstrates how to define and seed PostgreSQL tables with cyclic foreign key relationships. The example shows a model table that references a model_image table, which in turn references back to the model table.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-seed/0.1.3.md#2025-04-11_snippet_4

LANGUAGE: typescript
CODE:
```
import type { AnyPgColumn } from "drizzle-orm/pg-core";
import {
  foreignKey,
  integer,
  pgTable,
  serial,
  varchar,
} from "drizzle-orm/pg-core";

export const modelTable = pgTable(
  "model",
  {
    id: serial().primaryKey(),
    name: varchar().notNull(),
    defaultImageId: integer(),
  },
  (t) => [
    foreignKey({
      columns: [t.defaultImageId],
      foreignColumns: [modelImageTable.id],
    }),
  ]
);

export const modelImageTable = pgTable("model_image", {
  id: serial().primaryKey(),
  url: varchar().notNull(),
  caption: varchar(),
  modelId: integer()
    .notNull()
    .references((): AnyPgColumn => modelTable.id),
});

async function main() {
  const db = drizzle(process.env.DATABASE_URL!);
  await seed(db, { modelTable, modelImageTable });
}

main();
```

----------------------------------------

TITLE: Using createSelectSchema with Enums and Views in TypeScript
DESCRIPTION: Demonstrates how to use the createSelectSchema function with PostgreSQL enums and views. It shows type inference and parsing for both enum and view schemas.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-valibot/0.3.0.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
import { pgEnum } from 'drizzle-orm/pg-core';
import { createSelectSchema } from 'drizzle-valibot';
import { parse } from 'valibot';

const roles = pgEnum('roles', ['admin', 'basic']);
const rolesSchema = createSelectSchema(roles);
const parsed: 'admin' | 'basic' = parse(rolesSchema, ...);

const usersView = pgView('users_view').as((qb) => qb.select().from(users).where(gt(users.age, 18)));
const usersViewSchema = createSelectSchema(usersView);
const parsed: { id: number; name: string; age: number } = parse(usersViewSchema, ...);
```

----------------------------------------

TITLE: Setting Up Neon Database Environment Variables
DESCRIPTION: Environment variable configuration for Neon Serverless database connection, including database URL and project name for postgres.js driver migrations.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/examples/neon-cloudflare/readme.md#2025-04-11_snippet_1

LANGUAGE: env
CODE:
```
DATABASE_URL=postgres://user:password@localhost:5432/dbname
PROJECT_NAME=shiny-fire-338756
```

----------------------------------------

TITLE: Implementing UPDATE FROM with Drizzle ORM in PostgreSQL and SQLite
DESCRIPTION: Example showing how to use the UPDATE...FROM feature in Drizzle ORM to update records in a users table based on data from a cities table. The query updates the cityId field in users where city name is 'Seattle' and user name is 'John'.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.36.3.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
await db
  .update(users)
  .set({ cityId: cities.id })
  .from(cities)
  .where(and(eq(cities.name, 'Seattle'), eq(users.name, 'John')))
```

----------------------------------------

TITLE: Using pg_vector in Drizzle ORM Queries
DESCRIPTION: Examples of using pg_vector functions in Drizzle ORM queries, including ordering, selecting, and subqueries.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.31.0.md#2025-04-11_snippet_3

LANGUAGE: typescript
CODE:
```
import { l2Distance } from 'drizzle-orm';

// SELECT * FROM items ORDER BY embedding <-> '[3,1,2]' LIMIT 5;
db.select().from(items).orderBy(l2Distance(items.embedding, [3,1,2]))

// SELECT embedding <-> '[3,1,2]' AS distance FROM items;
db.select({ distance: l2Distance(items.embedding, [3,1,2]) })

// SELECT * FROM items ORDER BY embedding <-> (SELECT embedding FROM items WHERE id = 1) LIMIT 5;
const subquery = db.select({ embedding: items.embedding }).from(items).where(eq(items.id, 1));
db.select().from(items).orderBy(l2Distance(items.embedding, subquery)).limit(5)

// SELECT (embedding <#> '[3,1,2]') * -1 AS inner_product FROM items;
db.select({ innerProduct: sql`(${maxInnerProduct(items.embedding, [3,1,2])}) * -1` }).from(items)
```

----------------------------------------

TITLE: Initializing Drizzle Database Instance with HTTP Proxy (TypeScript)
DESCRIPTION: Sets up a Drizzle database instance using the pg-proxy driver. It implements HTTP calls to communicate with a proxy server for database operations. The function handles both 'all' and 'execute' methods, returning rows in the required format.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/examples/pg-proxy/README.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
import axios from 'axios';
import { drizzle } from 'drizzle-orm/pg-proxy';

const db = drizzle(async (sql, params, method) => {
  try {
    const rows = await axios.post('http://localhost:3000/query', {
      sql,
      params,
      method,
    });

    return { rows: rows.data };
  } catch (e: any) {
    console.error('Error from pg proxy server: ', e.response.data);
    return { rows: [] };
  }
});
```

----------------------------------------

TITLE: Linking PostgreSQL Policies to Existing Tables in Drizzle ORM
DESCRIPTION: This snippet shows how to link a PostgreSQL policy to an existing table using Drizzle ORM. It's particularly useful for database providers like Neon or Supabase where you need to add policies to their existing tables.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.36.0.md#2025-04-11_snippet_3

LANGUAGE: typescript
CODE:
```
import { sql } from "drizzle-orm";
import { pgPolicy } from "drizzle-orm/pg-core";
import { authenticatedRole, realtimeMessages } from "drizzle-orm/supabase";

export const policy = pgPolicy("authenticated role insert policy", {
  for: "insert",
  to: authenticatedRole,
  using: sql``,
}).link(realtimeMessages);
```

----------------------------------------

TITLE: Advanced JSONB Conversion with Type Checking
DESCRIPTION: SQL query that safely converts stringified JSONB values while handling different JSON types including objects, arrays, and primitives.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.33.0.md#2025-04-11_snippet_2

LANGUAGE: sql
CODE:
```
UPDATE table_name
SET jsonb_column = CASE
    -- Convert to JSONB if it is a valid JSON object or array
    WHEN jsonb_column #>> '{}' LIKE '{%' OR jsonb_column #>> '{}' LIKE '[%' THEN
        (jsonb_column #>> '{}')::jsonb
    ELSE
        jsonb_column
END
WHERE
    jsonb_column IS NOT NULL;
```

----------------------------------------

TITLE: Defining PostgreSQL array columns in Drizzle ORM
DESCRIPTION: Shows how to define PostgreSQL tables with array columns using Drizzle ORM. This example creates a users table with an array of phone numbers stored as varchar(256).
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-seed/0.1.3.md#2025-04-11_snippet_1

LANGUAGE: typescript
CODE:
```
import { pgTable, integer, text, varchar } from "drizzle-orm/pg-core";
import { drizzle } from "drizzle-orm/node-postgres";
import { seed } from "drizzle-seed";

const users = pgTable("users", {
  id: integer().primaryKey(),
  name: text().notNull(),
  phone_numbers: varchar({ length: 256 }).array(),
});
```

----------------------------------------

TITLE: Automatically seeding PostgreSQL array columns
DESCRIPTION: Shows how to use the automatic seeding feature for tables with array columns. This simpler approach lets Drizzle handle array dimensions automatically without manual configuration.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-seed/0.1.3.md#2025-04-11_snippet_3

LANGUAGE: typescript
CODE:
```
async function main() {
  const db = drizzle(process.env.DATABASE_URL!);
  await seed(db, { users });
}

main();
```

----------------------------------------

TITLE: Initializing Drizzle with Vercel Postgres
DESCRIPTION: Example of initializing Drizzle ORM with Vercel Postgres, which automatically retrieves the connection URL.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.34.0.md#2025-04-11_snippet_8

LANGUAGE: typescript
CODE:
```
drizzle("vercel-postgres")
```

----------------------------------------

TITLE: Configuring Drizzle Kit with Extension Filters
DESCRIPTION: Example of configuring Drizzle Kit to filter out tables created by PostGIS extension using the new 'extensionsFilters' parameter.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.31.0.md#2025-04-11_snippet_6

LANGUAGE: typescript
CODE:
```
import { defineConfig } from 'drizzle-kit'

export default defaultConfig({
  dialect: "postgresql",
  extensionsFilters: ["postgis"],
})
```

----------------------------------------

TITLE: Integer Type Mapping Example
DESCRIPTION: Example of mapping integer values from driver responses in a PostgreSQL column implementation.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/docs/custom-types.md#2025-04-11_snippet_2

LANGUAGE: typescript
CODE:
```
override mapFromDriverValue(value: number | string): number {
  if (typeof value === 'string') {
    return parseInt(value);
  }
  return value;
}
```

----------------------------------------

TITLE: Configuring Drizzle with pglite Driver in TypeScript
DESCRIPTION: Configuration setup for using pglite driver with drizzle-kit. This enables PostgreSQL database operations using a local file-based database with full support for drizzle-kit commands and Drizzle Studio.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-kit/0.24.2.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
import { defineConfig } from "drizzle-kit";

export default defineConfig({
  dialect: "postgresql",
  driver: "pglite",
  schema: "./schema.ts",
  dbCredentials: {
    url: "local-pg.db",
  },
  verbose: true,
  strict: true,
});
```

----------------------------------------

TITLE: Defining Related Tables in Drizzle ORM - TypeScript
DESCRIPTION: Creates two PostgreSQL tables (users and cities) with a foreign key relationship, defining a one-to-many relationship where users belong to cities.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/docs/joins.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
const users = pgTable('users', {
  id: serial('id').primaryKey(),
  firstName: text('first_name').notNull(),
  lastName: text('last_name'),
  cityId: int('city_id').references(() => cities.id),
});

const cities = pgTable('cities', {
  id: serial('id').primaryKey(),
  name: text('name').notNull(),
});
```

----------------------------------------

TITLE: Using pg_vector Functions in Drizzle ORM
DESCRIPTION: Examples of using predefined pg_vector functions and creating custom functions for vector operations in Drizzle ORM queries.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.31.0.md#2025-04-11_snippet_2

LANGUAGE: typescript
CODE:
```
import { l2Distance, l1Distance, innerProduct, 
          cosineDistance, hammingDistance, jaccardDistance } from 'drizzle-orm'

l2Distance(table.column, [3, 1, 2]) // table.column <-> '[3, 1, 2]'
l1Distance(table.column, [3, 1, 2]) // table.column <+> '[3, 1, 2]'

innerProduct(table.column, [3, 1, 2]) // table.column <#> '[3, 1, 2]'
cosineDistance(table.column, [3, 1, 2]) // table.column <=> '[3, 1, 2]'

hammingDistance(table.column, '101') // table.column <~> '101'
jaccardDistance(table.column, '101') // table.column <%> '101'

export function l2Distance(
  column: SQLWrapper | AnyColumn,
  value: number[] | string[] | TypedQueryBuilder<any> | string,
): SQL {
  if (is(value, TypedQueryBuilder<any>) || typeof value === 'string') {
    return sql`${column} <-> ${value}`;
  }
  return sql`${column} <-> ${JSON.stringify(value)}`;
}
```

----------------------------------------

TITLE: JSON Type Mapping Example
DESCRIPTION: Example of mapping JSON data to driver values in a PostgreSQL column implementation.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/docs/custom-types.md#2025-04-11_snippet_1

LANGUAGE: typescript
CODE:
```
override mapToDriverValue(value: TData): string {
  return JSON.stringify(value);
}
```

----------------------------------------

TITLE: Initializing Drizzle ORM with Bun SQL Driver via Connection String
DESCRIPTION: Demonstrates how to initialize Drizzle ORM using the new Bun SQL driver with a connection string. This approach connects to a PostgreSQL database using an environment variable for the connection URL.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.39.0.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
import { drizzle } from 'drizzle-orm/bun-sql';

const db = drizzle(process.env.PG_DB_URL!);

const result = await db.select().from(...);
```

----------------------------------------

TITLE: Defining pg_vector Indexes in Drizzle ORM
DESCRIPTION: Examples of defining pg_vector indexes for L2 distance, Inner product, Cosine distance, L1 distance, Hamming distance, and Jaccard distance in Drizzle ORM.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.31.0.md#2025-04-11_snippet_1

LANGUAGE: typescript
CODE:
```
const table = pgTable('items', {
    embedding: vector('embedding', { dimensions: 3 })
}, (table) => ({
    l2: index('l2_index').using('hnsw', table.embedding.op('vector_l2_ops'))
    ip: index('ip_index').using('hnsw', table.embedding.op('vector_ip_ops'))
    cosine: index('cosine_index').using('hnsw', table.embedding.op('vector_cosine_ops'))
}))

const table = pgTable('table', {
    embedding: vector('embedding', { dimensions: 3 })
}, (table) => ({
    l1: index('l1_index').using('hnsw', table.embedding.op('vector_l1_ops'))
    hamming: index('hamming_index').using('hnsw', table.embedding.op('bit_hamming_ops'))
    bit: index('bit_jaccard_index').using('hnsw', table.embedding.op('bit_jaccard_ops'))
}))
```

----------------------------------------

TITLE: Index Configuration Examples with Naming Requirements
DESCRIPTION: Examples showing how to correctly configure indexes in Drizzle ORM with emphasis on the naming requirements when using expressions. Demonstrates which configurations work without errors and which require manual naming.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.31.0.md#2025-04-11_snippet_11

LANGUAGE: typescript
CODE:
```
index().on(table.id, table.email) // will work well and name will be autogeneretaed
index('my_name').on(table.id, table.email) // will work well

// but

index().on(sql`lower(${table.email})`) // error
index('my_name').on(sql`lower(${table.email})`) // will work well
```

----------------------------------------

TITLE: Implementing UNIQUE Constraints in MySQL with Drizzle ORM
DESCRIPTION: Examples of defining single-column and multi-column unique constraints in MySQL tables with Drizzle ORM. Similar to PostgreSQL implementation but without the NULLS NOT DISTINCT option which is not supported by MySQL.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.27.2.md#2025-04-11_snippet_1

LANGUAGE: typescript
CODE:
```
// single column
const table = mysqlTable('table', {
    id: serial('id').primaryKey(),
    name: text('name').notNull().unique(),
    state: text('state').unique('custom'),
    field: text('field').unique('custom_field'),
});
// multiple columns
const table = mysqlTable('cities1', {
    id: serial('id').primaryKey(),
    name: text('name').notNull(),
    state: text('state'),
}, (t) => ({
    first: unique().on(t.name, t.state),
    second: unique('custom_name1').on(t.name, t.state),
}));
```

----------------------------------------

TITLE: Vector Query Examples with Drizzle ORM
DESCRIPTION: Examples of using vector distance functions in Drizzle ORM queries for ordering, calculating distances, comparing with subqueries, and more complex operations.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.31.0-beta.md#2025-04-11_snippet_6

LANGUAGE: typescript
CODE:
```
import { l2Distance } from 'drizzle-orm';

// SELECT * FROM items ORDER BY embedding <-> '[3,1,2]' LIMIT 5;
db.select().from(items).orderBy(l2Distance(items.embedding, [3,1,2]))

// SELECT embedding <-> '[3,1,2]' AS distance FROM items;
db.select({ distance: l2Distance(items.embedding, [3,1,2]) })

// SELECT * FROM items ORDER BY embedding <-> (SELECT embedding FROM items WHERE id = 1) LIMIT 5;
const subquery = db.select({ embedding: items.embedding }).from(items).where(eq(items.id, 1));
db.select().from(items).orderBy(l2Distance(items.embedding, subquery)).limit(5)

// SELECT (embedding <#> '[3,1,2]') * -1 AS inner_product FROM items;
db.select({ innerProduct: sql`(${maxInnerProduct(items.embedding, [3,1,2])}) * -1` }).from(items)

// and more!
```

----------------------------------------

TITLE: Initializing Drizzle with AWS Data API for PostgreSQL
DESCRIPTION: Example of initializing Drizzle ORM with AWS Data API for PostgreSQL, requiring specific AWS connection parameters.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.34.0.md#2025-04-11_snippet_6

LANGUAGE: typescript
CODE:
```
drizzle("aws-data-api-pg", {
  connection: {
    resourceArn: "",
    database: "",
    secretArn: "",
  },
});
```

----------------------------------------

TITLE: Using Vector Distance Functions in Drizzle ORM
DESCRIPTION: Importing and using predefined vector distance functions in Drizzle ORM for different distance calculations between vector columns and vector literals.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.31.0-beta.md#2025-04-11_snippet_4

LANGUAGE: typescript
CODE:
```
import { l2Distance, l1Distance, innerProduct, 
          cosineDistance, hammingDistance, jaccardDistance } from 'drizzle-orm'

l2Distance(table.column, [3, 1, 2]) // table.column <-> '[3, 1, 2]'
l1Distance(table.column, [3, 1, 2]) // table.column <+> '[3, 1, 2]'

innerProduct(table.column, [3, 1, 2]) // table.column <#> '[3, 1, 2]'
cosineDistance(table.column, [3, 1, 2]) // table.column <=> '[3, 1, 2]'

hammingDistance(table.column, '101') // table.column <~> '101'
jaccardDistance(table.column, '101') // table.column <%> '101'
```

----------------------------------------

TITLE: Defining Supabase Predefined Roles in TypeScript
DESCRIPTION: Exports predefined Supabase roles (anon, authenticated, service_role, postgres_role, supabase_auth_admin) marked as existing in the system
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-kit/0.27.0.md#2025-04-11_snippet_6

LANGUAGE: typescript
CODE:
```
export const anonRole = pgRole('anon').existing();
export const authenticatedRole = pgRole('authenticated').existing();
export const serviceRole = pgRole('service_role').existing();
export const postgresRole = pgRole('postgres_role').existing();
export const supabaseAuthAdminRole = pgRole('supabase_auth_admin').existing();
```

----------------------------------------

TITLE: Initializing Drizzle with Node-Postgres (New Simplified Method)
DESCRIPTION: New simplified method to initialize Drizzle ORM with Node-Postgres using connection URL.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.34.0.md#2025-04-11_snippet_5

LANGUAGE: typescript
CODE:
```
import { drizzle } from 'drizzle-orm'

const db1 = await drizzle("node-postgres", process.env.POSTGRES_URL);

const db2 = await drizzle("node-postgres", {
  connection: process.env.POSTGRES_URL,
  logger: true
});

const db3 = await drizzle("node-postgres", {
  connection: {
    connectionString: process.env.POSTGRES_URL,
  },
});

const db4 = await drizzle("node-postgres", {
  connection: {
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    host: process.env.DB_HOST,
    port: process.env.DB_PORT,
    database: process.env.DB_NAME,
    ssl: true,
  },
});
```

----------------------------------------

TITLE: Implementing Custom Vector Distance Functions
DESCRIPTION: Example of how to implement custom vector distance functions in Drizzle ORM by defining a function that generates the appropriate SQL fragment with the vector operator.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.31.0-beta.md#2025-04-11_snippet_5

LANGUAGE: typescript
CODE:
```
export function l2Distance(
  column: SQLWrapper | AnyColumn,
  value: number[] | string[] | TypedQueryBuilder<any> | string,
): SQL {
  if (is(value, TypedQueryBuilder<any>) || typeof value === 'string') {
    return sql`${column} <-> ${value}`;
  }
  return sql`${column} <-> ${JSON.stringify(value)}`;
}
```

----------------------------------------

TITLE: Initializing Drizzle with Node-Postgres (Traditional Method)
DESCRIPTION: Example of initializing Drizzle ORM with a manually created Node-Postgres client.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.34.0.md#2025-04-11_snippet_4

LANGUAGE: typescript
CODE:
```
const client = new Pool({ url: '' });
drizzle(client, { logger: true });
```

----------------------------------------

TITLE: Defining PostGIS Geometry Type in Drizzle ORM
DESCRIPTION: Example of defining and using the PostGIS 'geometry' type in Drizzle ORM, including options for type, mode, and SRID.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.31.0.md#2025-04-11_snippet_5

LANGUAGE: typescript
CODE:
```
const items = pgTable('items', {
  geo: geometry('geo', { type: 'point' }),
  geoObj: geometry('geo_obj', { type: 'point', mode: 'xy' }),
  geoSrid: geometry('geo_options', { type: 'point', mode: 'xy', srid: 4000 }),
});
```

----------------------------------------

TITLE: Configuring MySQL SSL Options in Drizzle Kit
DESCRIPTION: Example of defining MySQL database credentials with SSL options in drizzle-kit config. Accepts either a string or SslOptions object from the mysql2 package.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.31.0.md#2025-04-11_snippet_8

LANGUAGE: typescript
CODE:
```
import { defineConfig } from 'drizzle-kit'

export default defaultConfig({
  dialect: "mysql",
  dbCredentials: {
    ssl: "", // string | SslOptions (ssl options from mysql2 package)
  }
})
```

----------------------------------------

TITLE: Creating Select Schema for Enums and Views in TypeScript
DESCRIPTION: Demonstrates how to use the createSelectSchema function with pgEnum and pgView. It shows the creation of schemas for both an enum of roles and a view of users over 18.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-zod/0.6.0.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
import { pgEnum } from 'drizzle-orm/pg-core';
import { createSelectSchema } from 'drizzle-zod';

const roles = pgEnum('roles', ['admin', 'basic']);
const rolesSchema = createSelectSchema(roles);
const parsed: 'admin' | 'basic' = rolesSchema.parse(...);

const usersView = pgView('users_view').as((qb) => qb.select().from(users).where(gt(users.age, 18)));
const usersViewSchema = createSelectSchema(usersView);
const parsed: { id: number; name: string; age: number } = usersViewSchema.parse(...);
```

----------------------------------------

TITLE: INSERT INTO SELECT Using QueryBuilder Class Instance
DESCRIPTION: Alternative way to implement INSERT INTO...SELECT using the QueryBuilder class directly. This approach might be preferred in certain code organization patterns.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.36.3.md#2025-04-11_snippet_7

LANGUAGE: typescript
CODE:
```
const qb = new QueryBuilder();
await db.insert(employees).select(
    qb.select({ name: users.name }).from(users).where(eq(users.role, 'employee'))
);
```

----------------------------------------

TITLE: INSERT INTO SELECT with Callback Function
DESCRIPTION: Example showing how to use a callback function for the select operation in an INSERT INTO...SELECT query. The callback returns a select query builder.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.36.3.md#2025-04-11_snippet_8

LANGUAGE: typescript
CODE:
```
await db.insert(employees).select(
    () => db.select({ name: users.name }).from(users).where(eq(users.role, 'employee'))
);
```

----------------------------------------

TITLE: Importing Predefined Supabase Roles from Drizzle ORM
DESCRIPTION: This snippet shows the predefined roles available from the 'drizzle-orm/supabase' import. These roles are marked as existing and can be used in PostgreSQL schema definitions when working with Supabase.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.36.0.md#2025-04-11_snippet_8

LANGUAGE: typescript
CODE:
```
// drizzle-orm/supabase
export const anonRole = pgRole('anon').existing();
export const authenticatedRole = pgRole('authenticated').existing();
export const serviceRole = pgRole('service_role').existing();
export const postgresRole = pgRole('postgres_role').existing();
export const supabaseAuthAdminRole = pgRole('supabase_auth_admin').existing();
```

----------------------------------------

TITLE: INSERT INTO SELECT with Callback and Query Builder Parameter
DESCRIPTION: Example showing how to use a callback function with a query builder parameter. This approach allows for cleaner syntax when building complex queries.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.36.3.md#2025-04-11_snippet_9

LANGUAGE: typescript
CODE:
```
await db.insert(employees).select(
    (qb) => qb.select({ name: users.name }).from(users).where(eq(users.role, 'employee'))
);
```

----------------------------------------

TITLE: INSERT INTO SELECT Using SQL Template Tag
DESCRIPTION: Example showing how to use a raw SQL template tag for the select operation in an INSERT INTO...SELECT query. This provides maximum flexibility for complex queries.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.36.3.md#2025-04-11_snippet_10

LANGUAGE: typescript
CODE:
```
await db.insert(employees).select(
    sql`select "users"."name" as "name" from "users" where "users"."role" = 'employee'`
);
```

----------------------------------------

TITLE: Using Seed Function with Drizzle Relations
DESCRIPTION: This code demonstrates how to use the seed function with Drizzle Relations objects. It imports the schema with defined relations and uses the seed function to populate the database, which now understands and respects the relation constraints between tables.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-seed/0.3.0.md#2025-04-11_snippet_1

LANGUAGE: typescript
CODE:
```
// index.ts
import { seed } from "drizzle-seed";
import * as schema from './schema.ts'

async function main() {
  const db = drizzle(process.env.DATABASE_URL!);
  await seed(db, schema);
}

main();
```

----------------------------------------

TITLE: Documenting Bug Fix for Prepared Statements in drizzle-orm-pg 0.13.2
DESCRIPTION: This snippet outlines the release notes for drizzle-orm-pg version 0.13.2, indicating a fix for prepared statements usage. The change aims to improve the functionality and reliability of prepared statements within the library.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm-pg/0.13.2.md#2025-04-11_snippet_0

LANGUAGE: Markdown
CODE:
```
# drizzle-orm-pg 0.13.2

- Fix prepared statements usage.
```

----------------------------------------

TITLE: Installing Latest LibSQL Client - Bash
DESCRIPTION: Command to install the latest version of @libsql/client package which is required for migration functionality.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-kit/0.25.0.md#2025-04-11_snippet_0

LANGUAGE: bash
CODE:
```
npm i @libsql/client@latest
```

----------------------------------------

TITLE: Generated SQL DDL Output
DESCRIPTION: The SQL DDL output generated by the 'drizzle-kit export' command showing the CREATE TABLE statement for the users table with appropriate column definitions and constraints.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-kit/0.30.1.md#2025-04-11_snippet_2

LANGUAGE: bash
CODE:
```
CREATE TABLE "users" (
        "id" serial PRIMARY KEY NOT NULL,
        "email" text NOT NULL,
        "name" text
);
```

----------------------------------------

TITLE: INSERT INTO SELECT with Callback Returning SQL Template
DESCRIPTION: Example showing how to use a callback that returns a SQL template tag. This combines the benefits of callbacks with the flexibility of raw SQL.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.36.3.md#2025-04-11_snippet_11

LANGUAGE: typescript
CODE:
```
await db.insert(employees).select(
    () => sql`select "users"."name" as "name" from "users" where "users"."role" = 'employee'`
);
```

----------------------------------------

TITLE: Error Fix for Prepared Statement Without Fields
DESCRIPTION: Description of a bug fix for the 'Statement does not return any data - use run()' error that occurred when no fields were provided to a prepared statement.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm-sqlite/0.12.0-beta.20.md#2025-04-11_snippet_1

LANGUAGE: markdown
CODE:
```
Statement does not return any data - use run()
```

----------------------------------------

TITLE: Running Drizzle Kit Migration Generation
DESCRIPTION: Command to execute the configured Drizzle Kit migration generation script.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/drizzle-kit/README.md#2025-04-11_snippet_4

LANGUAGE: shell
CODE:
```
npm run generate
```

----------------------------------------

TITLE: Configuring Drizzle Kit in package.json
DESCRIPTION: Package.json configuration for running Drizzle Kit with CLI options to generate migrations.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/drizzle-kit/README.md#2025-04-11_snippet_3

LANGUAGE: jsonc
CODE:
```
{
 "scripts": {
  "generate": "drizzle-kit generate --out migrations-folder --schema src/db/schema.ts"
 }
}
```

----------------------------------------

TITLE: Generated SQL Migration for Database Schema
DESCRIPTION: Auto-generated SQL migration that creates tables with appropriate columns, constraints, and indexes based on the Drizzle ORM schema definition.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/drizzle-kit/README.md#2025-04-11_snippet_1

LANGUAGE: sql
CODE:
```
CREATE TABLE IF NOT EXISTS auth_otp (
 "id" SERIAL PRIMARY KEY,
 "phone" character varying(256),
 "user_id" INT
);

CREATE TABLE IF NOT EXISTS users (
 "id" SERIAL PRIMARY KEY,
 "full_name" character varying(256)
);

DO $$ BEGIN
 ALTER TABLE auth_otp ADD CONSTRAINT auth_otp_user_id_fkey FOREIGN KEY ("user_id") REFERENCES users(id);
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;

CREATE INDEX IF NOT EXISTS users_full_name_index ON users (full_name);
```

----------------------------------------

TITLE: Documenting Release Changes for drizzle-orm-pg 0.16.1 in Markdown
DESCRIPTION: This snippet outlines the changes made in version 0.16.1 of drizzle-orm-pg. The main update is the correction of documentation links, which improves the overall usability and accessibility of the project's documentation.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm-pg/0.16.1.md#2025-04-11_snippet_0

LANGUAGE: Markdown
CODE:
```
# drizzle-orm-pg 0.16.1

- Fix documentation links
```

----------------------------------------

TITLE: SQL Data Type Changes and Fixes
DESCRIPTION: Collection of changes related to data type handling and fixes across multiple databases including bigint/number modes, decimal/numeric types, and buffer handling improvements.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.41.0.md#2025-04-11_snippet_0

LANGUAGE: sql
CODE:
```
numeric[], timestamp[], timestamp_with_timezone[], interval[], date[]
```

----------------------------------------

TITLE: Installing Drizzle Kit via NPM
DESCRIPTION: Command to install Drizzle Kit as a development dependency using NPM.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/drizzle-kit/README.md#2025-04-11_snippet_2

LANGUAGE: shell
CODE:
```
npm install -D drizzle-kit
```

----------------------------------------

TITLE: Adding New User with cURL POST Request
DESCRIPTION: cURL command to send a POST request for adding a new user to the 'users' table.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/examples/libsql/README.md#2025-04-11_snippet_4

LANGUAGE: bash
CODE:
```
curl --request POST \
  --url http://localhost:3000/users \
  --header 'Content-Type: application/json' \
  --data '{
  "name": "John Doe",
  "email": "john@test.com"
}'
```

----------------------------------------

TITLE: Changelog Entry for drizzle-orm-pg v0.14.4
DESCRIPTION: Version update notes indicating the addition of author field in package.json file
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm-pg/0.14.4.md#2025-04-11_snippet_0

LANGUAGE: markdown
CODE:
```
# drizzle-orm-pg 0.14.4

- Fill author field in package.json
```

----------------------------------------

TITLE: Using $type() Method for Column Type Override
DESCRIPTION: Shows the new syntax for overriding data types in column definitions using the $type() method, replacing the previous generic syntax
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.23.0.md#2025-04-11_snippet_1

LANGUAGE: typescript
CODE:
```
// Before
const test = mysqlTable('test', {
  jsonField: json<Data>('json_field'),
});

// After
const test = mysqlTable('test', {
  jsonField: json('json_field').$type<Data>(),
});
```

----------------------------------------

TITLE: Using Explicit SQL Format Flag
DESCRIPTION: Running the drizzle-kit export command with the explicit '--sql' flag to specify SQL DDL as the output format. This is currently the default and only option.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-kit/0.30.1.md#2025-04-11_snippet_3

LANGUAGE: bash
CODE:
```
npx drizzle-kit export --sql
```

----------------------------------------

TITLE: Using Table Aliases with UPDATE FROM in Drizzle ORM
DESCRIPTION: Example showing how to use table aliases in an UPDATE...FROM query. This creates an alias 'c' for the cities table and uses it in the update operation.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.36.3.md#2025-04-11_snippet_2

LANGUAGE: typescript
CODE:
```
const c = alias(cities, 'c');
await db
  .update(users)
  .set({ cityId: c.id })
  .from(c);
```

----------------------------------------

TITLE: Installing Dependencies with pnpm
DESCRIPTION: Command to install the required modules for the local server using pnpm.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/examples/libsql/README.md#2025-04-11_snippet_2

LANGUAGE: bash
CODE:
```
pnpm i
```

----------------------------------------

TITLE: INSERT INTO SELECT with Query Builder in Drizzle ORM
DESCRIPTION: Example showing how to use INSERT INTO...SELECT syntax with a query builder in Drizzle ORM. This inserts records into the employees table with names selected from the users table where role is 'employee'.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.36.3.md#2025-04-11_snippet_6

LANGUAGE: typescript
CODE:
```
const insertedEmployees = await db
  .insert(employees)
  .select(
    db.select({ name: users.name }).from(users).where(eq(users.role, 'employee'))
  )
  .returning({
    id: employees.id,
    name: employees.name
  });
```

----------------------------------------

TITLE: Raw SQL Join Example - SQL
DESCRIPTION: Shows a raw SQL query that joins cities and users tables, selecting specific columns with aliases to identify the source table.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/docs/joins.md#2025-04-11_snippet_1

LANGUAGE: sql
CODE:
```
select
  cities.id as city_id,
  cities.name as city_name,
  users.id as user_id,
  users.first_name,
  users.last_name
from cities
left join users on users.city_id = cities.id
```

----------------------------------------

TITLE: Raw SQL Expression Selection and Joining
DESCRIPTION: Demonstrates how to select and join raw SQL expressions in queries using the sql template literal
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.23.0.md#2025-04-11_snippet_5

LANGUAGE: typescript
CODE:
```
const result = await db
  .select({
    dates: sql`current_date + s.a`,
  })
  .from(sql`generate_series(0,14,7) as s(a)`);
```

----------------------------------------

TITLE: Improved WITH Clause Subquery Syntax in Drizzle ORM
DESCRIPTION: This demonstrates the new improved syntax for WITH clause subqueries that better resembles standard SQL. It uses the $with and as methods to create a more readable common table expression definition.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.22.0.md#2025-04-11_snippet_2

LANGUAGE: typescript
CODE:
```
const regionalSales = db
  .$with('regional_sales')
  .as(
    db
      .select({
        region: orders.region,
        totalSales: sql<number>`sum(${orders.amount})`.as('total_sales'),
      })
      .from(orders)
      .groupBy(orders.region),
  );

await db.with(regionalSales).select(...).from(...);
```

----------------------------------------

TITLE: Result Type for Basic Join - TypeScript
DESCRIPTION: Shows the TypeScript type generated for the basic join query result, where joined fields are made nullable to represent possible missing joined rows.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/docs/joins.md#2025-04-11_snippet_3

LANGUAGE: typescript
CODE:
```
{
  cityId: number;
  cityName: string;
  userId: number | null;
  firstName: string | null;
  lastName: string | null;
}[]
```

----------------------------------------

TITLE: Fetching All Users with cURL GET Request
DESCRIPTION: cURL command to fetch all users from the server as JSON.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/examples/libsql/README.md#2025-04-11_snippet_5

LANGUAGE: bash
CODE:
```
curl --url http://localhost:3000/users
```

----------------------------------------

TITLE: Generated SQL for UPDATE FROM with RETURNING Clause
DESCRIPTION: The SQL that Drizzle ORM generates for an UPDATE...FROM query that includes a RETURNING clause with columns from both tables.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.36.3.md#2025-04-11_snippet_5

LANGUAGE: sql
CODE:
```
update "users" set "city_id" = "cities"."id" 
from "cities" 
returning "users"."id", "cities"."name"
```

----------------------------------------

TITLE: SQLite Migration Example - SQL
DESCRIPTION: Example of new SQLite migration format showing table recreation with data preservation.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-kit/0.25.0.md#2025-04-11_snippet_3

LANGUAGE: sql
CODE:
```
PRAGMA foreign_keys=OFF;
--> statement-breakpoint
CREATE TABLE `__new_worker` (
  `id` integer PRIMARY KEY NOT NULL,
  `name` text NOT NULL,
  `salary` text NOT NULL,
  `job_id` integer,
  FOREIGN KEY (`job_id`) REFERENCES `job`(`id`) ON UPDATE no action ON DELETE no action
);
--> statement-breakpoint
INSERT INTO `__new_worker`("id", "name", "salary", "job_id") SELECT "id", "name", "salary", "job_id" FROM `worker`;
--> statement-breakpoint
DROP TABLE `worker`;
--> statement-breakpoint
ALTER TABLE `__new_worker` RENAME TO `worker`;
--> statement-breakpoint
PRAGMA foreign_keys=ON;
```

----------------------------------------

TITLE: Defining Database Schema with Drizzle ORM in TypeScript
DESCRIPTION: Example of creating database tables for users and authentication OTP using Drizzle ORM's schema definition. Demonstrates table creation with primary keys, foreign keys, and indexes.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/drizzle-kit/README.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
import { integer, pgTable, serial, text, varchar } from "drizzle-orm/pg-core";

const users = pgTable("users", {
    id: serial("id").primaryKey(),
    fullName: varchar("full_name", { length: 256 }),
  }, (table) => ({
    nameIdx: index("name_idx", table.fullName),
  })
);

export const authOtp = pgTable("auth_otp", {
  id: serial("id").primaryKey(),
  phone: varchar("phone", { length: 256 }),
  userId: integer("user_id").references(() => users.id),
});
```

----------------------------------------

TITLE: Defining Drizzle ORM Schema with Foreign Key and Relation
DESCRIPTION: This code snippet demonstrates how to define a Drizzle ORM schema with a foreign key constraint and a one-to-many relation between 'users' and 'posts' tables. It shows the scenario that previously caused an infinite loop in the seeder.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-seed/0.3.1.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
// schema.ts
import { integer, pgTable, text } from "drizzle-orm/pg-core";
import { relations } from "drizzle-orm/relations";

export const users = pgTable("users", {
  id: integer().primaryKey(),
  name: text(),
  email: text(),
});

export const posts = pgTable("posts", {
  id: integer().primaryKey(),
  content: text(),
  userId: integer().references(() => users.id),
});

export const postsRelation = relations(posts, ({ one }) => ({
  user: one(users, {
    fields: [posts.userId],
    references: [users.id],
  }),
}));
```

----------------------------------------

TITLE: Updated Enum Column Syntax in MySQL Tables
DESCRIPTION: Illustrates the new syntax for defining text-based enum columns, using an object parameter with enum array instead of generic types
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.23.0.md#2025-04-11_snippet_2

LANGUAGE: typescript
CODE:
```
// Before
const test = mysqlTable('test', {
  role: text<'admin' | 'user'>('role'),
});

// After
const test = mysqlTable('test', {
  role: text('role', { enum: ['admin', 'user'] }),
});
```

----------------------------------------

TITLE: Resetting Database with Drizzle Seed
DESCRIPTION: Shows how to use the reset function to clear and reseed a database, which is particularly useful for test suites that need a fresh database state before each test run.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/drizzle-seed/README.md#2025-04-11_snippet_3

LANGUAGE: typescript
CODE:
```
// path to a file with schema you want to reset
import * as schema from "./schema.ts";
import { reset } from "drizzle-seed";

async function main() {
  const db = drizzle(process.env.DATABASE_URL!);
  await reset(db, schema);
}

main();
```

----------------------------------------

TITLE: Complex SQL Query with Field References in DrizzleORM
DESCRIPTION: Example of a complex SQL query using DrizzleORM that demonstrates the usage of field references in where(), having(), groupBy() and orderBy() clauses. The query joins cities and users tables, performs string operations, counting, and filtering based on computed values.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.21.1.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
await db
    .select({
      id: citiesTable.id,
      name: sql<string>`upper(${citiesTable.name})`.as('upper_name'),
      usersCount: sql<number>`count(${users2Table.id})::int`.as('users_count'),
    })
    .from(citiesTable)
    .leftJoin(users2Table, eq(users2Table.cityId, citiesTable.id))
    .where(({ name }) => sql`length(${name}) >= 3`)
    .groupBy(citiesTable.id)
    .having(({ usersCount }) => sql`${usersCount} > 0`)
    .orderBy(({ name }) => name);
```

----------------------------------------

TITLE: SQLite Migration SQL Example
DESCRIPTION: Example of SQL migration statements generated for SQLite, including table recreation and data transfer.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.34.0.md#2025-04-11_snippet_3

LANGUAGE: sql
CODE:
```
PRAGMA foreign_keys=OFF;
--> statement-breakpoint
CREATE TABLE `__new_worker` (
  `id` integer PRIMARY KEY NOT NULL,
  `name` text NOT NULL,
  `salary` text NOT NULL,
  `job_id` integer,
  FOREIGN KEY (`job_id`) REFERENCES `job`(`id`) ON UPDATE no action ON DELETE no action
);
--> statement-breakpoint
INSERT INTO `__new_worker`("id", "name", "salary", "job_id") SELECT "id", "name", "salary", "job_id" FROM `worker`;
--> statement-breakpoint
DROP TABLE `worker`;
--> statement-breakpoint
ALTER TABLE `__new_worker` RENAME TO `worker`;
--> statement-breakpoint
PRAGMA foreign_keys=ON;
```

----------------------------------------

TITLE: Using WITH Clause with INSERT Operation in Drizzle ORM
DESCRIPTION: Demonstrates how to use a WITH clause (Common Table Expression) with an INSERT operation in Drizzle ORM. This example creates a CTE that inserts a user and returns the inserted row, then selects from this CTE.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.39.0.md#2025-04-11_snippet_2

LANGUAGE: typescript
CODE:
```
const users = pgTable('users', {
  id: serial('id').primaryKey(),
  name: text('name').notNull(),
});

const sq = db.$with('sq').as(
    db.insert(users).values({ name: 'John' }).returning(),
);

const result = await db.with(sq).select().from(sq);
```

----------------------------------------

TITLE: New Raw String Query Execution in Drizzle ORM
DESCRIPTION: The new simplified approach for executing raw SQL queries in Drizzle ORM, allowing direct use of SQL strings without requiring SQL templates or the sql utility.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.34.0.md#2025-04-11_snippet_18

LANGUAGE: typescript
CODE:
```
db.execute('select * from users')
```

----------------------------------------

TITLE: Generated SQL for UPDATE FROM with Table Aliases
DESCRIPTION: The SQL that Drizzle ORM generates when using table aliases in an UPDATE...FROM query. The cities table is aliased as 'c' in the FROM clause.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.36.3.md#2025-04-11_snippet_3

LANGUAGE: sql
CODE:
```
update "users" set "city_id" = "c"."id" 
from "cities" "c"
```

----------------------------------------

TITLE: Setting Up Environment for Local Server in Bash
DESCRIPTION: Command to copy the example environment file to create a local configuration.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/examples/libsql/README.md#2025-04-11_snippet_0

LANGUAGE: bash
CODE:
```
cp .env.example .env
```

----------------------------------------

TITLE: Generating Drizzle ORM Migrations
DESCRIPTION: Command to generate a new migration based on schema changes using Drizzle Kit.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/examples/libsql/README.md#2025-04-11_snippet_12

LANGUAGE: bash
CODE:
```
pnpm generate
```

----------------------------------------

TITLE: Running Drizzle-Kit Export Command
DESCRIPTION: Shell command demonstrating how to use the new export feature by running 'npx drizzle-kit export' to convert Drizzle schema definitions into SQL statements.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-kit/0.30.1.md#2025-04-11_snippet_1

LANGUAGE: bash
CODE:
```
npx drizzle-kit export
```

----------------------------------------

TITLE: Improved SQL Operators in Relational Queries Where Clause
DESCRIPTION: Comparison of old and new syntax for using SQL operators in the where filter function of relational queries. The new approach provides operators as parameters to the filter function, eliminating the need for imports.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.28.6.md#2025-04-11_snippet_6

LANGUAGE: typescript
CODE:
```
import { inArray } from "drizzle-orm/pg-core";

await db.users.findFirst({
  where: (table, _) => inArray(table.id, [ ... ])
})
```

LANGUAGE: typescript
CODE:
```
await db.users.findFirst({
  where: (table, { inArray }) => inArray(table.id, [ ... ])
})
```

----------------------------------------

TITLE: Setting a Custom Seed Value for Deterministic Data Generation
DESCRIPTION: Demonstrates how to set a specific seed value to generate consistent, deterministic datasets across different runs. Using the same seed value will produce the same random data each time.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-seed/0.1.1.md#2025-04-11_snippet_2

LANGUAGE: typescript
CODE:
```
await seed(db, schema, { seed: 12345 });
```

----------------------------------------

TITLE: Drizzle Connection with Casing - TypeScript
DESCRIPTION: Example of database connection configuration with the new casing parameter.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-kit/0.25.0.md#2025-04-11_snippet_5

LANGUAGE: typescript
CODE:
```
const db = await drizzle('node-postgres', { connection: '', casing: 'snake_case' })
```

----------------------------------------

TITLE: Creating Select Schema for Enums and Views in TypeScript
DESCRIPTION: Demonstrates how to use the createSelectSchema function with pgEnum and pgView. It shows parsing of enum values and view data using Typebox's Value.Parse.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-typebox/0.2.0.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
import { pgEnum } from 'drizzle-orm/pg-core';
import { createSelectSchema } from 'drizzle-typebox';
import { Value } from '@sinclair/typebox/value';

const roles = pgEnum('roles', ['admin', 'basic']);
const rolesSchema = createSelectSchema(roles);
const parsed: 'admin' | 'basic' = Value.Parse(rolesSchema, ...);

const usersView = pgView('users_view').as((qb) => qb.select().from(users).where(gt(users.age, 18)));
const usersViewSchema = createSelectSchema(usersView);
const parsed: { id: number; name: string; age: number } = Value.Parse(usersViewSchema, ...);
```

----------------------------------------

TITLE: Version Information in Markdown
DESCRIPTION: Release note header showing the package name and new version number.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm-mysql/0.15.0.md#2025-04-11_snippet_0

LANGUAGE: markdown
CODE:
```
# drizzle-orm-mysql 0.15.0
```

----------------------------------------

TITLE: Configuring Drizzle Seed Count Option
DESCRIPTION: Shows how to specify the number of entities to create using the count option in drizzle-seed. This allows creating more or fewer entities than the default of 10.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/drizzle-seed/README.md#2025-04-11_snippet_1

LANGUAGE: typescript
CODE:
```
await seed(db, schema, { count: 1000 });
```

----------------------------------------

TITLE: SQL Generation with Breakpoints in Drizzle Kit
DESCRIPTION: Example of SQL generated by Drizzle Kit with breakpoints, allowing for separate execution of statements.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.21.0.md#2025-04-11_snippet_8

LANGUAGE: sql
CODE:
```
CREATE TABLE `users` (
  `id` int PRIMARY KEY NOT NULL,
  `full_name` text NOT NULL,
);
--> statement-breakpoint
CREATE TABLE `table` (
  `id` int PRIMARY KEY NOT NULL,
  `phone` int,
);
```

----------------------------------------

TITLE: Implementing Conditional WHERE Clause with .if() in Drizzle ORM (TypeScript)
DESCRIPTION: This snippet demonstrates how to use the newly added `.if()` function in WHERE expressions to conditionally apply filters. It selects all users after a specified cursor ID, but only if the cursor value is provided.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.30.10.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
function getUsersAfter(cursor?: number) {
    return db.select().from(users).where(
        gt(users.id, cursor).if(cursor)
    );
}
```

----------------------------------------

TITLE: Using LibSQL Batch API with Drizzle ORM in TypeScript
DESCRIPTION: Example demonstrating how to use the LibSQL batch API to execute multiple database operations in a single call. The batch can include insert, update, query, and select operations, returning strongly-typed responses.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.28.6.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
const batchResponse = await db.batch([
	db.insert(usersTable).values({ id: 1, name: 'John' }).returning({
		id: usersTable.id,
	}),
	db.update(usersTable).set({ name: 'Dan' }).where(eq(usersTable.id, 1)),
	db.query.usersTable.findMany({}),
	db.select().from(usersTable).where(eq(usersTable.id, 1)),
	db.select({ id: usersTable.id, invitedBy: usersTable.invitedBy }).from(
		usersTable,
	),
]);
```

----------------------------------------

TITLE: BatchResponse Type Structure for LibSQL in Drizzle ORM
DESCRIPTION: Type definition showing the structure of the response received from a LibSQL batch operation. Each element in the tuple corresponds to the result of an operation in the batch, with properly typed return values.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.28.6.md#2025-04-11_snippet_1

LANGUAGE: typescript
CODE:
```
type BatchResponse = [
	{
		id: number;
	}[],
	ResultSet,
	{
		id: number;
		name: string;
		verified: number;
		invitedBy: number | null;
	}[],
	{
		id: number;
		name: string;
		verified: number;
		invitedBy: number | null;
	}[],
	{
		id: number;
		invitedBy: number | null;
	}[],
];
```

----------------------------------------

TITLE: Using toSQL Method with Relational Query API in Drizzle ORM
DESCRIPTION: Example of using the new .toSQL() method with the Relational Query API to get the SQL that would be executed, useful for debugging or logging purposes.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.28.6.md#2025-04-11_snippet_4

LANGUAGE: typescript
CODE:
```
const query = db.query.usersTable.findFirst().toSQL();
```

----------------------------------------

TITLE: Grouped Multiple Tables Result Type - TypeScript
DESCRIPTION: Shows the TypeScript type for query results with multiple grouped tables, preserving the nullability of the joined table.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/docs/joins.md#2025-04-11_snippet_7

LANGUAGE: typescript
CODE:
```
{
  city: {
    id: number;
    name: string;
  };
  user: {
    id: number;
    firstName: string;
    lastName: string | null;
  } | null;
}
```

----------------------------------------

TITLE: Optimized SQL Query Generation in Drizzle ORM v0.28.0
DESCRIPTION: The SQL query generated by Drizzle ORM v0.28.0 for relational queries, showing the use of lateral joins and more efficient data retrieval patterns that improve performance.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.28.0.md#2025-04-11_snippet_3

LANGUAGE: sql
CODE:
```
select "comments"."id",
       "comments"."user_id",
       "comments"."post_id",
       "comments"."content",
       "comments_user"."data" as "user",
       "comments_post"."data" as "post"
from "comments"
         left join lateral (select json_build_array("comments_user"."name") as "data"
                            from (select *
                                  from "users" "comments_user"
                                  where "comments_user"."id" = "comments"."user_id"
                                  limit 1) "comments_user") "comments_user" on true
         left join lateral (select json_build_array("comments_post"."title", "comments_post_user"."data") as "data"
                            from (select *
                                  from "posts" "comments_post"
                                  where "comments_post"."id" = "comments"."post_id"
                                  limit 1) "comments_post"
                                     left join lateral (select json_build_array("comments_post_user"."name") as "data"
                                                        from (select *
                                                              from "users" "comments_post_user"
                                                              where "comments_post_user"."id" = "comments_post"."user_id"
                                                              limit 1) "comments_post_user") "comments_post_user"
                                               on true) "comments_post" on true
order by "comments"."id"
limit 1
```

----------------------------------------

TITLE: Legacy SQL Query Generation in Drizzle ORM
DESCRIPTION: The SQL query that was generated by Drizzle ORM before v0.28.0, showing the more complex approach with nested aggregations and multiple GROUP BY clauses that was less efficient.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.28.0.md#2025-04-11_snippet_4

LANGUAGE: sql
CODE:
```
SELECT "id",
       "user_id",
       "post_id",
       "content",
       "user"::JSON,
       "post"::JSON
FROM
  (SELECT "comments".*,
          CASE
              WHEN count("comments_post"."id") = 0 THEN '[]'
              ELSE json_agg(json_build_array("comments_post"."title", "comments_post"."user"::JSON))::text
          END AS "post"
   FROM
     (SELECT "comments".*,
             CASE
                 WHEN count("comments_user"."id") = 0 THEN '[]'
                 ELSE json_agg(json_build_array("comments_user"."name"))::text
             END AS "user"
      FROM "comments"
      LEFT JOIN
        (SELECT "comments_user".*
         FROM "users" "comments_user") "comments_user" ON "comments"."user_id" = "comments_user"."id"
      GROUP BY "comments"."id",
               "comments"."user_id",
               "comments"."post_id",
               "comments"."content") "comments"
   LEFT JOIN
     (SELECT "comments_post".*
      FROM
        (SELECT "comments_post".*,
                CASE
                    WHEN count("comments_post_user"."id") = 0 THEN '[]'
                    ELSE json_agg(json_build_array("comments_post_user"."name"))
                END AS "user"
         FROM "posts" "comments_post"
         LEFT JOIN
           (SELECT "comments_post_user".*
            FROM "users" "comments_post_user") "comments_post_user" ON "comments_post"."user_id" = "comments_post_user"."id"
         GROUP BY "comments_post"."id") "comments_post") "comments_post" ON "comments"."post_id" = "comments_post"."id"
   GROUP BY "comments"."id",
            "comments"."user_id",
            "comments"."post_id",
            "comments"."content",
            "comments"."user") "comments"
LIMIT 1
```

----------------------------------------

TITLE: Mixed Selection Result Type - TypeScript
DESCRIPTION: Shows the TypeScript type for a mixed selection query where one table is selected entirely and the other has specific fields selected.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/docs/joins.md#2025-04-11_snippet_11

LANGUAGE: typescript
CODE:
```
{
  cities: {
    id: number;
    name: string;
  };
  user: {
    firstName: string;
  } | null;
}
```

----------------------------------------

TITLE: Using Standalone Query Builder in Drizzle ORM
DESCRIPTION: This snippet demonstrates how to use the new standalone query builder that works without requiring a database connection. It creates a SELECT query with a WHERE condition and converts it to SQL and parameters.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.22.0.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
import { queryBuilder as qb } from 'drizzle-orm/pg-core';

const query = qb.select().from(users).where(eq(users.name, 'Dan'));
const { sql, params } = query.toSQL();
```

----------------------------------------

TITLE: Using SingleStore Dialect with Drizzle ORM and Zod Schema Validation
DESCRIPTION: This snippet demonstrates how to define tables using the SingleStore dialect, create validation schemas with drizzle-zod, and validate query results. It shows how schema validation works with both partial and complete query results, including an error case when fields are missing from the query.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-zod/0.6.1.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
import { singlestoreTable, text, int } from 'drizzle-orm/singlestore-core';
import { createSelectSchema } from 'drizzle-zod';

const users = singlestoreTable('users', {
  id: int().primaryKey(),
  name: text().notNull(),
  age: int().notNull()
});

const userSelectSchema = createSelectSchema(users);
const rows = await db.select({ id: users.id, name: users.name }).from(users).limit(1);
const parsed: { id: number; name: string; age: number } = userSelectSchema.parse(rows[0]); // Error: `age` is not returned in the above query

const rows = await db.select().from(users).limit(1);
const parsed: { id: number; name: string; age: number } = userSelectSchema.parse(rows[0]); // Will parse successfully
```

----------------------------------------

TITLE: Configuring Drizzle Kit for Gel Dialect
DESCRIPTION: Configuration setup for using Gel dialect in drizzle-kit. This configuration file specifies the dialect to be used as 'gel' for database schema operations.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-kit/0.30.5.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
// drizzle.config.ts
import { defineConfig } from 'drizzle-kit';

export default defineConfig({
  dialect: 'gel',
});
```

----------------------------------------

TITLE: Using the drizzle.mock() Function for Testing
DESCRIPTION: Demonstrates how to use the new mock function instead of the previous workaround. This is intended for testing scenarios or type checking without actual database connections.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.35.0.md#2025-04-11_snippet_3

LANGUAGE: typescript
CODE:
```
const db = drizzle.mock()
```

----------------------------------------

TITLE: Filter Operators in Drizzle ORM SQLite
DESCRIPTION: A comprehensive list of filter operators available in Drizzle ORM for constructing WHERE clauses, including comparison, logical, and pattern matching operators.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/drizzle-orm/src/sqlite-core/README.md#2025-04-11_snippet_14

LANGUAGE: typescript
CODE:
```
eq(column, value)
eq(column1, column2)
ne(column, value)
ne(column1, column2)

less(column, value)
lessEq(column, value)

gt(column, value)
gt(column1, column2)
gte(column, value)
gte(column1, column2)
lt(column, value)
lt(column1, column2)
lte(column, value)
lte(column1, column2)

isNull(column)
isNotNull(column)

inArray(column, values[])
inArray(column, sqlSubquery)
notInArray(column, values[])
notInArray(column, sqlSubquery)

exists(sqlSubquery)
notExists(sqlSubquery)

between(column, min, max)
notBetween(column, min, max)

like(column, value)
like(column, value)
ilike(column, value)
notIlike(column, value)

not(sqlExpression)

and(...expressions: Expr[])
or(...expressions: Expr[])
```

----------------------------------------

TITLE: Conditionally Selecting Fields in Drizzle ORM Queries
DESCRIPTION: Demonstrates how to conditionally include fields in SELECT queries using spread syntax and conditional objects, allowing for dynamic query construction based on runtime conditions.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/drizzle-orm/src/sqlite-core/README.md#2025-04-11_snippet_11

LANGUAGE: typescript
CODE:
```
function selectUsers(withName: boolean) {
  return db
    .select({
      id: users.id,
      ...(withName ? { name: users.name } : {}),
    })
    .from(users)
    .all();
}

const users = selectUsers(true);
```

----------------------------------------

TITLE: Initializing Drizzle ORM with OP-SQLite Driver
DESCRIPTION: Demonstrates how to set up and use the new OP-SQLite driver with Drizzle ORM. The example shows importing the required packages, opening a database connection, initializing Drizzle, and executing a simple query.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.30.1.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
import { open } from '@op-engineering/op-sqlite';
import { drizzle } from 'drizzle-orm/op-sqlite';

const opsqlite = open({
	name: 'myDB',
});
const db = drizzle(opsqlite);

await db.select().from(users);
```

----------------------------------------

TITLE: Using MySQL $returningId() function with custom primary key generator
DESCRIPTION: Shows how to use $returningId() with custom primary key generation using $defaultFn to generate custom IDs at runtime, which will be returned in the result.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.32.0.md#2025-04-11_snippet_1

LANGUAGE: typescript
CODE:
```
import { varchar, text, mysqlTable } from 'drizzle-orm/mysql-core';
import { createId } from '@paralleldrive/cuid2';

const usersTableDefFn = mysqlTable('users_default_fn', {
  customId: varchar('id', { length: 256 }).primaryKey().$defaultFn(createId),
  name: text('name').notNull(),
});


const result = await db.insert(usersTableDefFn).values([{ name: 'John' }, { name: 'John1' }]).$returningId();
//  ^? { customId: string }[]
```

----------------------------------------

TITLE: Column Type Definitions
DESCRIPTION: Available column types and their configuration options.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/drizzle-orm/src/sqlite-core/README.md#2025-04-11_snippet_6

LANGUAGE: typescript
CODE:
```
integer('...');
integer('...', { mode: 'number' | 'timestamp' | 'timestamp_ms' })
real('...');
text('...');
text('role', { enum: ['admin', 'user'] });

blob('...');
blob('...', { mode: 'json' | 'buffer' });
blob('...').$type<{ foo: string }>();

column.primaryKey();
column.notNull();
column.default(...);
```

----------------------------------------

TITLE: Legacy Raw Query Execution in Drizzle ORM
DESCRIPTION: Previous methods for executing raw SQL queries in Drizzle ORM using SQL templates or sql.raw. These approaches require importing the sql utility and using template literals.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.34.0.md#2025-04-11_snippet_17

LANGUAGE: typescript
CODE:
```
import { sql } from 'drizzle-orm'

db.execute(sql`select * from ${users}`);
// or
db.execute(sql.raw(`select * from ${users}`));
```

----------------------------------------

TITLE: Mixed Group Result Type - TypeScript
DESCRIPTION: Shows the TypeScript type for a query where columns from multiple tables are grouped into a single object, preserving individual nullability.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/docs/joins.md#2025-04-11_snippet_13

LANGUAGE: typescript
CODE:
```
{
  id: number;
  cityAndUser: {
    cityName: string;
    userId: number | null;
    firstName: string | null;
    lastName: string | null;
  };
}
```

----------------------------------------

TITLE: Installing Drizzle ORM
DESCRIPTION: Command to install the Drizzle ORM package via npm.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/examples/cloudflare-d1/README.md#2025-04-11_snippet_2

LANGUAGE: bash
CODE:
```
npm install drizzle-orm
```

----------------------------------------

TITLE: Defining Database Tables with Automatic Snake Case Mapping in Drizzle ORM
DESCRIPTION: Example of defining a database table with camelCase property names that will be automatically mapped to snake_case in the database. The inStock property will be mapped to in_stock in the database without needing an explicit alias.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.34.0.md#2025-04-11_snippet_11

LANGUAGE: typescript
CODE:
```
import { pgTable } from "drizzle-orm/pg-core";

export const ingredients = pgTable("ingredients", (t) => ({
  id: t.uuid().defaultRandom().primaryKey(),
  name: t.text().notNull(),
  description: t.text(),
  inStock: t.boolean().default(true),
}));
```

----------------------------------------

TITLE: Installing Latest LibSQL Client in Node.js
DESCRIPTION: Command to install the latest version of @libsql/client package using npm.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.34.0.md#2025-04-11_snippet_0

LANGUAGE: bash
CODE:
```
npm i @libsql/client@latest
```

----------------------------------------

TITLE: Custom Table Name Configuration
DESCRIPTION: Shows how to customize table names using table creator pattern.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/drizzle-orm/src/sqlite-core/README.md#2025-04-11_snippet_5

LANGUAGE: typescript
CODE:
```
import { sqliteTableCreator } from 'drizzle-orm/sqlite-core';

const sqliteTable = sqliteTableCreator((name) => `myprefix_${name}`);

const users = sqliteTable('users', {
  id: int('id').primaryKey(),
  name: text('name').notNull(),
});
```

----------------------------------------

TITLE: Using Deprecated and New Client Initialization in Drizzle ORM
DESCRIPTION: Shows both the deprecated pattern of directly passing a database client and the new recommended approach of passing client through configuration object. The deprecated approach will be supported until V1 release.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.35.0.md#2025-04-11_snippet_1

LANGUAGE: typescript
CODE:
```
import { drizzle } from "drizzle-orm/node-postgres";
import { Pool } from "pg";

const client = new Pool({ connectionString: process.env.DATABASE_URL });
const db = drizzle(client); // deprecated but available

// new version
const db = drizzle({
  client: client,
});
```

----------------------------------------

TITLE: Running Essential Commands for Drizzle better-sqlite3 Project
DESCRIPTION: Commands for generating schemas, running migrations, and starting the development server in a Drizzle ORM project using better-sqlite3.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/examples/better-sqlite3/readme.md#2025-04-11_snippet_0

LANGUAGE: bash
CODE:
```
npm run generate
npm run migrate
npm run dev
```

----------------------------------------

TITLE: Creating and Using ArkType Schemas with Drizzle ORM
DESCRIPTION: Demonstrates how to create and use ArkType schemas for database operations using drizzle-arktype plugin. Shows table definition, schema generation for insert/update/select operations, field overriding, schema refinement, and validation usage.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-arktype/0.1.2.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
import { pgEnum, pgTable, serial, text, timestamp } from 'drizzle-orm/pg-core';
import { createInsertSchema, createSelectSchema } from 'drizzle-arktype';
import { type } from 'arktype';

const users = pgTable('users', {
	id: serial('id').primaryKey(),
	name: text('name').notNull(),
	email: text('email').notNull(),
	role: text('role', { enum: ['admin', 'user'] }).notNull(),
	createdAt: timestamp('created_at').notNull().defaultNow(),
});

// Schema for inserting a user - can be used to validate API requests
const insertUserSchema = createInsertSchema(users);

// Schema for updating a user - can be used to validate API requests
const updateUserSchema = createUpdateSchema(users);

// Schema for selecting a user - can be used to validate API responses
const selectUserSchema = createSelectSchema(users);

// Overriding the fields
const insertUserSchema = createInsertSchema(users, {
	role: type('string'),
});

// Refining the fields - useful if you want to change the fields before they become nullable/optional in the final schema
const insertUserSchema = createInsertSchema(users, {
	id: (schema) => schema.atLeast(1),
	role: type('string'),
});

// Usage

const isUserValid = parse(insertUserSchema, {
	name: 'John Doe',
	email: 'johndoe@test.com',
	role: 'admin',
});
```

----------------------------------------

TITLE: Using Standalone Query Builder in Drizzle ORM with SQLite
DESCRIPTION: Shows how to use the standalone query builder in Drizzle ORM to construct queries without creating a database instance. This is useful for generating SQL queries independently.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/drizzle-orm/src/sqlite-core/README.md#2025-04-11_snippet_25

LANGUAGE: typescript
CODE:
```
import { queryBuilder as qb } from 'drizzle-orm/sqlite-core';

const query = qb.select().from(users).where(eq(users.name, 'Dan'));
const { sql, params } = query.toSQL();
```

----------------------------------------

TITLE: Executing SQL Queries and Joins with Raw SQL in Drizzle ORM
DESCRIPTION: Shows how to use raw SQL expressions within Drizzle ORM queries, including selecting from raw SQL and joining with raw SQL tables while maintaining type safety.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/drizzle-orm/src/sqlite-core/README.md#2025-04-11_snippet_10

LANGUAGE: typescript
CODE:
```
db.select({ x: sql<number>`x` }).from(sql`generate_series(2, 4) as g(x)`).all();

db
  .select({
    x1: sql<number>`g1.x`,
    x2: sql<number>`g2.x`
  })
  .from(sql`generate_series(2, 4) as g1(x)`)
  .leftJoin(sql`generate_series(2, 4) as g2(x)`)
  .all();
```

----------------------------------------

TITLE: Table Schema with Casing - TypeScript
DESCRIPTION: Example of table definition using the new casing feature for automatic column name mapping.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-kit/0.25.0.md#2025-04-11_snippet_4

LANGUAGE: typescript
CODE:
```
import { pgTable } from "drizzle-orm/pg-core";

export const ingredients = pgTable("ingredients", (t) => ({
  id: t.uuid().defaultRandom().primaryKey(),
  name: t.text().notNull(),
  description: t.text(),
  inStock: t.boolean().default(true),
}));
```

----------------------------------------

TITLE: Using WITH Clause with DELETE Operation in Drizzle ORM
DESCRIPTION: Demonstrates how to use a WITH clause with a DELETE operation in Drizzle ORM. This example creates a CTE that deletes users with a specific name and returns the deleted rows, then selects from this CTE.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.39.0.md#2025-04-11_snippet_4

LANGUAGE: typescript
CODE:
```
const users = pgTable('users', {
  id: serial('id').primaryKey(),
  name: text('name').notNull(),
});

const sq = db.$with('sq').as(
  db.delete(users).where(eq(users.name, 'John')).returning(),
);

const result = await db.with(sq).select().from(sq);
```

----------------------------------------

TITLE: Configuring Casing in Drizzle Kit Migration Configuration
DESCRIPTION: Setting up the Drizzle Kit configuration with the casing parameter to ensure consistent column name mapping during schema migration generation. This aligns with the casing strategy used in the ORM.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.34.0.md#2025-04-11_snippet_13

LANGUAGE: typescript
CODE:
```
import { defineConfig } from "drizzle-kit";

export default defineConfig({
  dialect: "postgresql",
  schema: "./schema.ts",
  dbCredentials: {
    url: "postgresql://postgres:password@localhost:5432/db",
  },
  casing: "snake_case",
});
```

----------------------------------------

TITLE: Type Inference and Database Types
DESCRIPTION: Demonstrates type inference for database entities and table models.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/drizzle-orm/src/sqlite-core/README.md#2025-04-11_snippet_4

LANGUAGE: typescript
CODE:
```
import { text, integer, sqliteTable } from 'drizzle-orm/sqlite-core';
import { InferModel } from 'drizzle-orm';

const users = sqliteTable('users', {
  id: integer('id').primaryKey(),
  fullName: text('full_name'),
  phone: text('phone'),
})

export type User = InferModel<typeof users> // return type when queried
export type InsertUser = InferModel<typeof users, 'insert'> // insert type
...
import { drizzle, BetterSQLite3Database } from 'drizzle-orm/better-sqlite3';
import Database from 'better-sqlite3';

const sqlite = new Database('sqlite.db');
const db: BetterSQLite3Database = drizzle(sqlite);

const result: User[] = await db.select().from(users).all();

const insertUser = (user: InsertUser) => {
  return db.insert(users).values(user).run()
}
```

----------------------------------------

TITLE: Using Count API as Subquery in Drizzle ORM
DESCRIPTION: Examples of using the $count method as a subquery within select and relational queries to count related records. This demonstrates counting posts for each user using different query styles.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.34.0.md#2025-04-11_snippet_16

LANGUAGE: typescript
CODE:
```
const users = await db.select({
    ...users,
    postsCount: db.$count(posts, eq(posts.authorId, users.id))
});

const users = await db.query.users.findMany({
    extras: {
        postsCount: db.$count(posts, eq(posts.authorId, users.id))
    }
})
```

----------------------------------------

TITLE: Basic Drizzle ORM SQLite Setup
DESCRIPTION: Quick start example showing table definition and database connection using better-sqlite3.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/drizzle-orm/src/sqlite-core/README.md#2025-04-11_snippet_1

LANGUAGE: typescript
CODE:
```
import { sqliteTable, text, integer } from 'drizzle-orm/sqlite-core';
import { drizzle } from 'drizzle-orm/better-sqlite3';
import Database from 'better-sqlite3';

const users = sqliteTable('users', {
  id: integer('id').primaryKey(),  // 'id' is the column name
  fullName: text('full_name'),
})

const sqlite = new Database('sqlite.db');
const db = drizzle(sqlite);

const allUsers = db.select().from(users).all();
```

----------------------------------------

TITLE: Using orderBy and limit in Update and Delete Statements
DESCRIPTION: Demonstrates the new orderBy and limit functions available in update and delete query builders for MySQL and SQLite. These additions provide more control over the queries being executed.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.35.0.md#2025-04-11_snippet_2

LANGUAGE: typescript
CODE:
```
await db.update(usersTable).set({ verified: true }).limit(2).orderBy(asc(usersTable.name));

await db.delete(usersTable).where(eq(usersTable.verified, false)).limit(1).orderBy(asc(usersTable.name));
```

----------------------------------------

TITLE: Starting Drizzle Studio Web UI
DESCRIPTION: Command to launch the Drizzle Studio web UI for visually managing and interacting with your database.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/examples/better-sqlite3/readme.md#2025-04-11_snippet_1

LANGUAGE: bash
CODE:
```
npm run studio
```

----------------------------------------

TITLE: Implementing Neon HTTP Batch Operations in TypeScript
DESCRIPTION: Demonstrates how to perform multiple database operations in a single batch request using Neon HTTP batch functionality. Shows insertion and query operations with typed responses.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.29.4.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
const batchResponse: BatchType = await db.batch([
	db.insert(usersTable).values({ id: 1, name: 'John' }).returning({
		id: usersTable.id,
	}),
	db.insert(usersTable).values({ id: 2, name: 'Dan' }),
	db.query.usersTable.findMany({}),
	db.query.usersTable.findFirst({}),
]);
```

LANGUAGE: typescript
CODE:
```
type BatchType = [
	{
		id: number;
	}[],
	NeonHttpQueryResult<never>,
	{
		id: number;
		name: string;
		verified: number;
		invitedBy: number | null;
	}[],
	{
		id: number;
		name: string;
		verified: number;
		invitedBy: number | null;
	} | undefined,
];
```

----------------------------------------

TITLE: Initializing Drizzle ORM with SQLite Proxy HTTP Client
DESCRIPTION: Sets up a Drizzle database instance with HTTP call implementation for proxying database queries to a remote server. Handles SQL queries, parameters, and different query methods while providing basic error handling.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/examples/sqlite-proxy/README.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
import axios from 'axios';
import { drizzle } from 'drizzle-orm/sqlite-proxy';

const db = drizzle(async (sql, params, method) => {
  try {
    const rows = await axios.post('http://localhost:3000/query', {
      sql,
      params,
      method,
    });

    return { rows: rows.data };
  } catch (e: any) {
    console.error('Error from sqlite proxy server: ', e.response.data);
    return { rows: [] };
  }
});
```

----------------------------------------

TITLE: Database Connection Examples
DESCRIPTION: Examples of connecting to different SQLite implementations including better-sqlite3, bun:sqlite, Cloudflare D1, and libSQL.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/drizzle-orm/src/sqlite-core/README.md#2025-04-11_snippet_2

LANGUAGE: typescript
CODE:
```
// better-sqlite3 or fly.io LiteFS
import { drizzle, BetterSQLite3Database } from 'drizzle-orm/better-sqlite3';
import Database from 'better-sqlite3';

const sqlite = new Database('sqlite.db');
const db/*: BetterSQLite3Database*/ = drizzle(sqlite);
const result = db.select().from(users).all()

// bun js embedded sqlite connector
import { drizzle, BunSQLiteDatabase } from 'drizzle-orm/bun-sqlite';
import { Database } from 'bun:sqlite';

const sqlite = new Database('nw.sqlite');
const db/*: BunSQLiteDatabase*/ = drizzle(sqlite);
const result = db.select().from(users).all()

// Cloudflare D1 connector
import { drizzle, DrizzleD1Database } from 'drizzle-orm/d1';

// env.DB from cloudflare worker environment
const db/*: DrizzleD1Database*/ = drizzle(env.DB);
const result = await db.select().from(users).all(); // pay attention this one is async

// libSQL or Turso
import { drizzle, LibSQLDatabase } from 'drizzle-orm/libsql';
import { Database } from '@libsql/sqlite3';

const sqlite = new Database('libsql://...'); // Remote server
// or
const sqlite = new Database('sqlite.db'); // Local file

const db/*: LibSQLDatabase*/ = drizzle(sqlite);
const result = await db.select().from(users).all(); // pay attention this one is async

// Custom Proxy HTTP driver
  const db = drizzle(async (sql, params, method) => {
    try {
      const rows = await axios.post('http://localhost:3000/query', { sql, params, method });

      return { rows: rows.data };
    } catch (e: any) {
      console.error('Error from sqlite proxy server: ', e.response.data)
      return { rows: [] };
    }
  });
```

----------------------------------------

TITLE: Creating Turso Database with CLI
DESCRIPTION: Command to create a new Turso database using the Turso CLI.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/examples/libsql/README.md#2025-04-11_snippet_6

LANGUAGE: bash
CODE:
```
turso db create drizzle-example
```

----------------------------------------

TITLE: Setting Turso Database Auth Token
DESCRIPTION: Example of adding the DATABASE_AUTH_TOKEN environment variable for Turso database authentication.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/examples/libsql/README.md#2025-04-11_snippet_10

LANGUAGE: plain
CODE:
```
DATABASE_AUTH_TOKEN=[your-auth-token]
```

----------------------------------------

TITLE: Supported Query Builders for LibSQL Batch API in Drizzle ORM
DESCRIPTION: List of all the query builder methods that can be used within the db.batch array. This includes various query methods like select, update, delete, insert, and the newer relational query API methods.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.28.6.md#2025-04-11_snippet_2

LANGUAGE: typescript
CODE:
```
`db.all()`,
`db.get()`,
`db.values()`,
`db.run()`,
`db.query.<table>.findMany()`,
`db.query.<table>.findFirst()`,
`db.select()...`,
`db.update()...`,
`db.delete()...`,
`db.insert()...`,
```

----------------------------------------

TITLE: Initializing Neon HTTP Connection with Drizzle ORM in TypeScript
DESCRIPTION: Shows how to initialize a database connection using Neon's HTTP driver and configure it with Drizzle ORM. Enables connection caching for better performance and demonstrates basic query setup.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.27.1.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
import { neon, neonConfig } from '@neondatabase/serverless';
import { drizzle } from 'drizzle-orm/neon-http';

neonConfig.fetchConnectionCache = true;

const sql = neon(process.env.DRIZZLE_DATABASE_URL!);
const db = drizzle(sql);

db.select(...)
```

----------------------------------------

TITLE: Initializing Drizzle ORM with Experimental WASM LibSQL Client
DESCRIPTION: Sets up a Drizzle ORM instance using the experimental WASM LibSQL client from the separate @libsql/client-wasm package.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.35.3.md#2025-04-11_snippet_6

LANGUAGE: typescript
CODE:
```
import { drizzle } from 'drizzle-orm/libsql';

const db = drizzle({ connection: {
  url: process.env.DATABASE_URL, 
  authToken: process.env.DATABASE_AUTH_TOKEN 
}});
```

----------------------------------------

TITLE: Performing INSERT Operations in Drizzle ORM SQLite
DESCRIPTION: Demonstrates various ways to insert data using Drizzle ORM, including inserting single records, multiple records, and returning inserted data with type inference for inserted models.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/drizzle-orm/src/sqlite-core/README.md#2025-04-11_snippet_15

LANGUAGE: typescript
CODE:
```
import { sqliteTable, text, integer } from 'drizzle-orm/sqlite-core';
import { InferModel } from 'drizzle-orm';
import { drizzle } from 'drizzle-orm/better-sqlite3';
import Database from 'better-sqlite3';

const sqlite = new Database('sqlite.db');
const db = drizzle(sqlite);

const users = sqliteTable('users', {
  id: integer('id').primaryKey(),
  name: text('name'),
  createdAt: integer('created_at', { mode: 'timestamp' }),
});

type NewUser = InferModel<typeof users, "insert">;

const newUser: NewUser = {
  name: 'Andrew',
  createdAt: new Date(),
};

db.insert(users).values(newUser).run();

const insertedUsers/*: NewUser[]*/ = db.insert(users).values(newUser).returning().all();

const insertedUsersIds/*: { insertedId: number }[]*/ = db.insert(users)
  .values(newUser)
  .returning({ insertedId: users.id })
  .all();
```

----------------------------------------

TITLE: Utility Functions in Drizzle ORM for SQLite
DESCRIPTION: Showcases utility functions in Drizzle ORM for SQLite, including printing SQL queries and executing raw queries. These functions are useful for debugging and performing custom database operations.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/drizzle-orm/src/sqlite-core/README.md#2025-04-11_snippet_29

LANGUAGE: typescript
CODE:
```
const query = db
  .select({ id: users.id, name: users.name })
  .from(users)
  .groupBy(users.id)
  .toSQL();
// query:
{
  sql: 'select 'id', 'name' from 'users' group by 'users'.'id'',
  params: [],
}
```

LANGUAGE: typescript
CODE:
```
// it will automatically run a parametrized query!
const res: QueryResult<any> = db.run(sql`SELECT * FROM users WHERE user.id = ${userId}`);
```

----------------------------------------

TITLE: Table Name Customization with Table Creators
DESCRIPTION: Shows how to use table creators to customize table names with prefixes or other modifications
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.23.0.md#2025-04-11_snippet_4

LANGUAGE: typescript
CODE:
```
import { mysqlTableCreator } from 'drizzle-orm/mysql-core';

const mysqlTable = mysqlTableCreator((name) => `myprefix_${name}`);

const users = mysqlTable('users', {
  id: int('id').primaryKey(),
  name: text('name').notNull(),
});
```

----------------------------------------

TITLE: Bulk Insert Values Array Syntax
DESCRIPTION: Demonstrates the new ability to directly pass an array of values to insert().values() without spreading
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.23.0.md#2025-04-11_snippet_3

LANGUAGE: typescript
CODE:
```
const users = mysqlTable('users', {
  id: int('id').primaryKey(),
  name: text('name').notNull(),
});

await users.insert().values([
  { name: 'John' },
  { name: 'Jane' },
]);
```

----------------------------------------

TITLE: All Fields Result Type - TypeScript
DESCRIPTION: Shows the TypeScript type generated when selecting all fields from joined tables, where table names are used as object keys.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/docs/joins.md#2025-04-11_snippet_9

LANGUAGE: typescript
CODE:
```
{
  cities: {
    id: number;
    name: string;
  };
  users: {
    id: number;
    firstName: string;
    lastName: string | null;
    cityId: number | null;
  } | null;
}[]
```

----------------------------------------

TITLE: Using WITH Clause with UPDATE Operation in Drizzle ORM
DESCRIPTION: Shows how to use a WITH clause with an UPDATE operation in Drizzle ORM. This example creates a CTE that updates users with a specific name and returns the updated rows, then selects from this CTE.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.39.0.md#2025-04-11_snippet_3

LANGUAGE: typescript
CODE:
```
const users = pgTable('users', {
  id: serial('id').primaryKey(),
  name: text('name').notNull(),
});

const sq = db.$with('sq').as(
    db.update(users).set({ age: 25 }).where(eq(users.name, 'John')).returning(),
);
const result = await db.with(sq).select().from(sq);
```

----------------------------------------

TITLE: Using Glob Patterns for Schema Path in Drizzle Kit CLI
DESCRIPTION: Example of using glob patterns to specify schema paths in the Drizzle Kit CLI command.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.21.0.md#2025-04-11_snippet_10

LANGUAGE: bash
CODE:
```
drizzle-kit generate:pg --out ./migrations --schema ./core/**/*.ts ./database/schema.ts
```

----------------------------------------

TITLE: Inserting Rows with Default Values in Drizzle ORM
DESCRIPTION: New feature in Drizzle ORM v0.28.0 that allows inserting rows with default values for all columns by providing empty objects. This is useful for tables with default values or auto-incrementing IDs.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.28.0.md#2025-04-11_snippet_5

LANGUAGE: typescript
CODE:
```
// Insert 1 row with all defaults
await db.insert(usersTable).values({});

// Insert 2 rows with all defaults
await db.insert(usersTable).values([{}, {}]);
```

----------------------------------------

TITLE: Initializing Drizzle ORM with HTTP-specific LibSQL Client
DESCRIPTION: Sets up a Drizzle ORM instance using the HTTP-specific LibSQL client. This module supports http and https connection protocols.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.35.3.md#2025-04-11_snippet_3

LANGUAGE: typescript
CODE:
```
import { drizzle } from 'drizzle-orm/libsql/http';

const db = drizzle({ connection: {
  url: process.env.DATABASE_URL, 
  authToken: process.env.DATABASE_AUTH_TOKEN 
}});
```

----------------------------------------

TITLE: Querying Database with Relational Query Builder in TypeScript
DESCRIPTION: This snippet showcases various ways to query the database using the Relational Query Builder in Drizzle ORM. It includes examples of selecting all users, finding the first user, and selecting posts with specific columns and relations.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.26.0.md#2025-04-11_snippet_3

LANGUAGE: typescript
CODE:
```
const users = await db.query.users.findMany();

const user = await db.query.users.findFirst();

const posts = await db.query.posts.findMany({
	columns: {
		id: true,
		content: true,
	},
	with: {
		comments: true,
	}
});

const posts = await db.query.posts.findMany({
	columns: {
		content: false,
	},
});
```

----------------------------------------

TITLE: Basic ESLint Configuration for Drizzle
DESCRIPTION: YAML configuration example for setting up the ESLint plugin with specific rules for enforcing WHERE clauses on DELETE and UPDATE operations.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/eslint-plugin-drizzle/readme.md#2025-04-11_snippet_2

LANGUAGE: yml
CODE:
```
root: true
parser: '@typescript-eslint/parser'
parserOptions:
  project: './tsconfig.json'
plugins:
  - drizzle
rules:
  'drizzle/enforce-delete-with-where': "error"
  'drizzle/enforce-update-with-where': "error"
```

----------------------------------------

TITLE: Initializing Local D1 Database
DESCRIPTION: Commands to execute local database initialization and run the development server with data persistence.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/examples/cloudflare-d1/README.md#2025-04-11_snippet_1

LANGUAGE: bash
CODE:
```
wrangler d1 execute <DATABASE_NAME> --local --file=./drizzle/0000_short_lockheed.sql
wrangler dev --local --persist
```

----------------------------------------

TITLE: Relational Query Example in Drizzle ORM
DESCRIPTION: Example of a relational query using Drizzle ORM's query builder to fetch comments with related user and post data. This demonstrates the structure of queries that benefit from the improved performance in v0.28.0.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.28.0.md#2025-04-11_snippet_2

LANGUAGE: typescript
CODE:
```
const items = await db.query.comments.findMany({
  limit,
  orderBy: comments.id,
  with: {
    user: {
      columns: { name: true },
    },
    post: {
      columns: { title: true },
      with: {
        user: {
          columns: { name: true },
        },
      },
    },
  },
});
```

----------------------------------------

TITLE: Configuring Local SQLite Database URL
DESCRIPTION: Example of the DATABASE_URL environment variable pointing to a local SQLite database file.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/examples/libsql/README.md#2025-04-11_snippet_1

LANGUAGE: plain
CODE:
```
DATABASE_URL=file:local.db
```

----------------------------------------

TITLE: Integrating Drizzle Schema with Kysely Query Builder in TypeScript
DESCRIPTION: Example showing how to define a database schema using Drizzle ORM and use Kysely as the query builder. The code demonstrates table definition, type integration, database connection setup, and query execution with full type safety.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/drizzle-orm/src/kysely/README.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
import { Kysely, PostgresDialect } from 'kysely';
import { Pool } from 'pg';
import { Kyselify } from 'drizzle-orm/kysely';
import { pgTable, serial, text } from 'drizzle-orm/pg-core';

const test = pgTable('test', {
  id: serial('id').primaryKey(),
  name: text('name').notNull(),
});

interface Database {
  test: Kyselify<typeof test>;
}

const db = new Kysely<Database>({
  dialect: new PostgresDialect({
    pool: new Pool(),
  }),
});

const result/*: { id: number, name: string }[] */ = db.selectFrom('test').selectAll().execute();
```

----------------------------------------

TITLE: Initializing Drizzle ORM with Bun SQL Driver via SQL Instance
DESCRIPTION: Shows how to initialize Drizzle ORM using a Bun SQL instance. This approach first creates a SQL client from Bun and then passes it to the Drizzle initialization function.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.39.0.md#2025-04-11_snippet_1

LANGUAGE: typescript
CODE:
```
import { drizzle } from 'drizzle-orm/bun-sqlite';
import { SQL } from 'bun';

const client = new SQL(process.env.PG_DB_URL!);
const db = drizzle({ client });

const result = await db.select().from(...);
```

----------------------------------------

TITLE: Implementing Migration Support with SQLite Proxy
DESCRIPTION: Configures database migration functionality using SQLite Proxy. This implementation handles executing migration queries through the proxy server, where the server is responsible for managing the transaction logic (commit or rollback).
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/examples/sqlite-proxy/README.md#2025-04-11_snippet_1

LANGUAGE: typescript
CODE:
```
import axios from 'axios';
import { migrate } from 'drizzle-orm/sqlite-proxy/migrator';

await migrate(db, async (queries) => {
  try {
    await axios.post('http://localhost:3000/migrate', { queries });
  } catch (e) {
    console.log(e);
    throw Error('Proxy server cannot run migrations');
  }
}, { migrationsFolder: 'drizzle' });
```

----------------------------------------

TITLE: Using WITH Clause with Raw SQL in Drizzle ORM
DESCRIPTION: Shows how to use a WITH clause with raw SQL template literals in Drizzle ORM. This example creates a CTE with custom column definitions and a raw SQL query that selects from the users table.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.39.0.md#2025-04-11_snippet_5

LANGUAGE: typescript
CODE:
```
const users = pgTable('users', {
  id: serial('id').primaryKey(),
  name: text('name').notNull(),
});

const sq = db.$with('sq', {
  userId: users.id,
  data: {
    name: users.name,
  },
}).as(sql`select * from ${users} where ${users.name} = 'John'`);

const result = await db.with(sq).select().from(sq);
```

----------------------------------------

TITLE: Using Supabase Roles with Drizzle ORM Policies
DESCRIPTION: This example demonstrates how to use Supabase predefined roles when defining policies on a table. It imports the serviceRole from Supabase to create a policy that restricts insert operations.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.36.0.md#2025-04-11_snippet_9

LANGUAGE: typescript
CODE:
```
import { sql } from 'drizzle-orm';
import { serviceRole } from 'drizzle-orm/supabase';
import { integer, pgPolicy, pgRole, pgTable } from 'drizzle-orm/pg-core';

export const admin = pgRole('admin');

export const users = pgTable('users', {
	id: integer(),
}, (t) => [
	pgPolicy(`policy-insert`, {
		for: 'insert',
		to: serviceRole,
		withCheck: sql`false`,
	}),
]);
```

----------------------------------------

TITLE: Configuring Turso Database URL
DESCRIPTION: Example of setting the DATABASE_URL environment variable for a Turso database.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/examples/libsql/README.md#2025-04-11_snippet_8

LANGUAGE: plain
CODE:
```
DATABASE_URL=libsql://[your-database]-[your-github].turso.io
```

----------------------------------------

TITLE: MySQL Database Introspection with Drizzle Kit
DESCRIPTION: Command to introspect a MySQL database using Drizzle Kit, generating schema files from an existing database.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.21.0.md#2025-04-11_snippet_9

LANGUAGE: bash
CODE:
```
drizzle-kit introspect:mysql --out ./migrations --connectionString mysql://user:password@127.0.0.1:3306/database
```

----------------------------------------

TITLE: Grouped Fields Join Query - TypeScript
DESCRIPTION: Demonstrates how to group fields from the joined table into a nested object, making it easier to check for the existence of the joined record.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/docs/joins.md#2025-04-11_snippet_4

LANGUAGE: typescript
CODE:
```
const rows = await db
  .select({
    cityId: cities.id,
    cityName: cities.name,
    user: {
      id: users.id,
      firstName: users.firstName,
      lastName: users.lastName,
    },
  })
  .from(cities)
  .leftJoin(users, eq(users.cityId, cities.id));
```

----------------------------------------

TITLE: UPDATE and DELETE Operations in Drizzle ORM SQLite
DESCRIPTION: Shows how to perform UPDATE and DELETE operations with filtering conditions in Drizzle ORM, allowing for modifying and removing records that match specific criteria.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/drizzle-orm/src/sqlite-core/README.md#2025-04-11_snippet_18

LANGUAGE: typescript
CODE:
```
db.update(users)
  .set({ name: 'Mr. Dan' })
  .where(eq(usersTable.name, 'Dan'))
  .run();
  
db.delete(users)
  .where(eq(usersTable.name, 'Dan'))
  .run();
```

----------------------------------------

TITLE: Performing Aggregation Queries in Drizzle ORM SQLite
DESCRIPTION: Demonstrates how to use SQL aggregation functions like COUNT, SUM in Drizzle ORM with proper type safety, including grouping and ordering results.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/drizzle-orm/src/sqlite-core/README.md#2025-04-11_snippet_19

LANGUAGE: typescript
CODE:
```
const orders = sqliteTable('order', {
  id: integer('id').primaryKey(),
  orderDate: integer('order_date', { mode: 'timestamp' }).notNull(),
  requiredDate: integer('required_date', { mode: 'timestamp' }).notNull(),
  shippedDate: integer('shipped_date', { mode: 'timestamp' }),
  shipVia: integer('ship_via').notNull(),
  freight: numeric('freight').notNull(),
  shipName: text('ship_name').notNull(),
  shipCity: text('ship_city').notNull(),
  shipRegion: text('ship_region'),
  shipPostalCode: text('ship_postal_code'),
  shipCountry: text('ship_country').notNull(),
  customerId: text('customer_id').notNull(),
  employeeId: integer('employee_id').notNull(),
});

const details = sqliteTable('order_detail', {
  unitPrice: numeric('unit_price').notNull(),
  quantity: integer('quantity').notNull(),
  discount: numeric('discount').notNull(),
  orderId: integer('order_id').notNull(),
  productId: integer('product_id').notNull(),
});


db
  .select({
    id: orders.id,
    shippedDate: orders.shippedDate,
    shipName: orders.shipName,
    shipCity: orders.shipCity,
    shipCountry: orders.shipCountry,
    productsCount: sql<number>`count(${details.productId})`,
    quantitySum: sql<number>`sum(${details.quantity})`,
    totalPrice: sql<number>`sum(${details.quantity} * ${details.unitPrice})`,
  })
  .from(orders)
  .leftJoin(details, eq(orders.id, details.orderId))
  .groupBy(orders.id)
  .orderBy(asc(orders.id))
  .all();
```

----------------------------------------

TITLE: New Count API in Drizzle ORM
DESCRIPTION: Using the new $count method to count entities in a table, with optional filtering. This simplified API returns the count directly as a number without needing manual SQL or destructuring.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.34.0.md#2025-04-11_snippet_15

LANGUAGE: typescript
CODE:
```
// how many users are in the database
const count: number = await db.$count(users);

// how many users with the name "Dan" are in the database
const count: number = await db.$count(users, eq(name, "Dan"));
```

----------------------------------------

TITLE: Querying Turso Database with CLI
DESCRIPTION: Command to execute a SQL query on the Turso database using the Turso CLI shell.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/examples/libsql/README.md#2025-04-11_snippet_11

LANGUAGE: bash
CODE:
```
turso db shell drizzle-example "select * from users"
```

----------------------------------------

TITLE: Error Fix for SQLite Schema Syntax in Async Driver Migrations
DESCRIPTION: Description of a bug fix for the 'Error: SqliteError: near "SCHEMA": syntax error' that occurred when running migrations with an async driver.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm-sqlite/0.12.0-beta.20.md#2025-04-11_snippet_0

LANGUAGE: markdown
CODE:
```
Error: SqliteError: near "SCHEMA": syntax error
```

----------------------------------------

TITLE: Generating and Running Migrations with Drizzle Kit for SQLite
DESCRIPTION: Demonstrates how to use Drizzle Kit to automatically generate SQL migrations for SQLite databases. It also shows how to run these migrations using the embedded migrations module.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/drizzle-orm/src/sqlite-core/README.md#2025-04-11_snippet_28

LANGUAGE: typescript
CODE:
```
import { index, integer, sqliteTable, text } from 'drizzle-orm/sqlite-core';

export const users = sqliteTable('users', {
  id: integer('id').primaryKey(),
  fullName: text('full_name'),
}, (users) => ({
  nameIdx: index('name_idx', users.fullName),
}));

export const authOtps = sqliteTable('auth_otp', {
  id: integer('id').primaryKey(),
  phone: text('phone'),
  userId: integer('user_id').references(() => users.id),
});
```

LANGUAGE: sql
CODE:
```
CREATE TABLE IF NOT EXISTS auth_otp (
  'id' INTEGER PRIMARY KEY,
  'phone' TEXT,
  'user_id' INTEGER
);

CREATE TABLE IF NOT EXISTS users (
  'id' INTEGER PRIMARY KEY,
  'full_name' TEXT
);

DO $$ BEGIN
 ALTER TABLE auth_otp ADD CONSTRAINT auth_otp_user_id_fkey FOREIGN KEY ('user_id') REFERENCES users(id);
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;

CREATE INDEX IF NOT EXISTS users_full_name_index ON users (full_name);
```

LANGUAGE: typescript
CODE:
```
import { drizzle } from 'drizzle-orm/better-sqlite3';
import { migrate } from 'drizzle-orm/better-sqlite3/migrator';
import Database from 'better-sqlite3';

const sqlite = new Database('sqlite.db');
const db = drizzle(sqlite);

// this will automatically run needed migrations on the database
migrate(db, { migrationsFolder: './drizzle' });
```

----------------------------------------

TITLE: Starting Local HTTP Server with pnpm
DESCRIPTION: Command to start the local HTTP server on port 3000, creating the database and performing initial migration.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/examples/libsql/README.md#2025-04-11_snippet_3

LANGUAGE: bash
CODE:
```
pnpm start
```

----------------------------------------

TITLE: Installing Drizzle ORM with SQLite Support
DESCRIPTION: Commands for installing Drizzle ORM core package with better-sqlite3 driver and optional migrations generator.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/drizzle-orm/src/sqlite-core/README.md#2025-04-11_snippet_0

LANGUAGE: bash
CODE:
```
npm install drizzle-orm better-sqlite3
## opt-in automatic migrations generator
npm install -D drizzle-kit
```

----------------------------------------

TITLE: Using WITH Statements with DELETE in Drizzle ORM
DESCRIPTION: Shows how to create a WITH clause for a DELETE statement that removes orders with amounts greater than the average. The example demonstrates defining a common table expression and using it in a delete operation with returning values.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.29.5.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
const averageAmount = db.$with('average_amount').as(
	db.select({ value: sql`avg(${orders.amount})`.as('value') }).from(orders),
);
const result = await db
	.with(averageAmount)
	.delete(orders)
	.where(gt(orders.amount, sql`(select * from ${averageAmount})`))
	.returning({
		id: orders.id,
	});
```

----------------------------------------

TITLE: Defining Custom Timestamp Type in MySQL
DESCRIPTION: Creates a custom Timestamp type for MySQL. This type allows storing date and time information with optional fractional seconds precision.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/docs/custom-types.lite.md#2025-04-11_snippet_10

LANGUAGE: typescript
CODE:
```
const customTimestamp = customType<
  { data: Date; driverData: string; config: { fsp: number } }
>({
  dataType(config) {
    const precision = typeof config.fsp !== 'undefined'
      ? ` (${config.fsp})`
      : '';
    return `timestamp${precision}`;
  },
  fromDriver(value: string): Date {
    return new Date(value);
  },
});
```

----------------------------------------

TITLE: Defining Custom Serial Type in MySQL
DESCRIPTION: Creates a custom Serial type for MySQL using the customType function. This type is typically used for auto-incrementing primary key columns.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/docs/custom-types.lite.md#2025-04-11_snippet_6

LANGUAGE: typescript
CODE:
```
const customSerial = customType<{ data: number; notNull: true; default: true }>(
  {
    dataType() {
      return 'serial';
    },
  },
);
```

----------------------------------------

TITLE: Basic Left Join with Drizzle ORM - TypeScript
DESCRIPTION: Performs a left join between cities and users tables using Drizzle ORM's fluent API, selecting specific columns from both tables with custom field names.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/docs/joins.md#2025-04-11_snippet_2

LANGUAGE: typescript
CODE:
```
const rows = await db
  .select({
      cityId: cities.id,
      cityName: cities.name,
      userId: users.id,
      firstName: users.firstName,
      lastName: users.lastName,
    })
  .from(cities)
  .leftJoin(users, eq(users.cityId, cities.id));
```

----------------------------------------

TITLE: Removed Nested Relations Filtering in Drizzle ORM
DESCRIPTION: Example of code that won't work in Drizzle ORM v0.28.0. The 'table' object in the 'where' callback no longer includes fields from 'with' and 'extras'.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.28.0.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
const usersWithPosts = await db.query.users.findMany({
  where: (table, { sql }) => (sql`json_array_length(${table.posts}) > 0`),
  with: {
    posts: true,
  },
});
```

----------------------------------------

TITLE: Implementing Read Replicas Support in Drizzle ORM
DESCRIPTION: This example shows how to use the 'withReplica' function to specify different database connections for read replicas and the main instance for write operations in Drizzle ORM.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.29.0.md#2025-04-11_snippet_3

LANGUAGE: typescript
CODE:
```
const primaryDb = drizzle(client);
const read1 = drizzle(client);
const read2 = drizzle(client);

const db = withReplicas(primaryDb, [read1, read2]);

// read from primary
db.$primary.select().from(usersTable);

// read from either read1 connection or read2 connection
db.select().from(usersTable)

// use primary database for delete operation
db.delete(usersTable).where(eq(usersTable.id, 1))
```

----------------------------------------

TITLE: Initializing Drizzle ORM with Node-specific LibSQL Client
DESCRIPTION: Sets up a Drizzle ORM instance using the Node.js-compatible LibSQL client. This module supports :memory:, file, wss, http, and turso connection protocols.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.35.3.md#2025-04-11_snippet_1

LANGUAGE: typescript
CODE:
```
import { drizzle } from 'drizzle-orm/libsql/node';

const db = drizzle({ connection: {
  url: process.env.DATABASE_URL, 
  authToken: process.env.DATABASE_AUTH_TOKEN 
}});
```

----------------------------------------

TITLE: Managing Transactions in Drizzle ORM with SQLite
DESCRIPTION: Illustrates how to perform database transactions using Drizzle ORM with SQLite. It covers basic transactions, nested transactions, and transaction settings.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/drizzle-orm/src/sqlite-core/README.md#2025-04-11_snippet_24

LANGUAGE: typescript
CODE:
```
db.transaction((tx) => {
  tx.insert(users).values(newUser).run();
  tx.update(users).set({ name: 'Mr. Dan' }).where(eq(users.name, 'Dan')).run();
  tx.delete(users).where(eq(users.name, 'Dan')).run();
});
```

LANGUAGE: typescript
CODE:
```
db.transaction((tx) => {
  tx.insert(users).values(newUser).run();
  tx.transaction((tx2) => {
    tx2.update(users).set({ name: 'Mr. Dan' }).where(eq(users.name, 'Dan')).run();
    tx2.delete(users).where(eq(users.name, 'Dan')).run();
  });
});
```

LANGUAGE: typescript
CODE:
```
interface SQLiteTransactionConfig {
  behavior?: 'deferred' | 'immediate' | 'exclusive';
}

db.transaction((tx) => { ... }, {
  behavior: 'immediate',
});
```

----------------------------------------

TITLE: Defining Custom Boolean Type in MySQL
DESCRIPTION: Creates a custom Boolean type for MySQL. This type is used for storing true/false values and includes a conversion from the driver's numeric representation.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/docs/custom-types.lite.md#2025-04-11_snippet_8

LANGUAGE: typescript
CODE:
```
const customBoolean = customType<{ data: boolean }>({
  dataType() {
    return 'boolean';
  },
  fromDriver(value) {
    if (typeof value === 'boolean') {
      return value;
    }
    return value === 1;
  },
});
```

----------------------------------------

TITLE: Inserting Multiple Records in Drizzle ORM SQLite
DESCRIPTION: Shows two approaches for inserting multiple records: using multiple values arguments or passing an array of items to insert, both with proper typing.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/drizzle-orm/src/sqlite-core/README.md#2025-04-11_snippet_16

LANGUAGE: typescript
CODE:
```
db.insert(users)
  .values(
    {
      name: 'Andrew',
      createdAt: new Date(),
    },
    {
      name: 'Dan',
      createdAt: new Date(),
    },
  )
  .run();
```

LANGUAGE: typescript
CODE:
```
const newUsers: NewUser[] = [
  {
      name: 'Andrew',
      createdAt: new Date(),
  },
  {
    name: 'Dan',
    createdAt: new Date(),
  },
];

db.insert(users).values(newUsers).run();
```

----------------------------------------

TITLE: Defining Tables in Default and Custom MySQL Schemas in Drizzle ORM
DESCRIPTION: This example demonstrates how to define tables in both the default schema and a custom schema using Drizzle ORM. The code shows the creation of two user tables with identical structure but in different MySQL schemas.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm-mysql/0.15.1.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
// Table in default schema
const publicUsersTable = mysqlTable('users', {
	id: serial('id').primaryKey(),
	name: text('name').notNull(),
	verified: boolean('verified').notNull().default(false),
	jsonb: json<string[]>('jsonb'),
	createdAt: timestamp('created_at', { fsp: 2 }).notNull().defaultNow(),
});


// Table in custom schema
const mySchema = mysqlSchema('mySchema');

const mySchemaUsersTable = mySchema('users', {
	id: serial('id').primaryKey(),
	name: text('name').notNull(),
	verified: boolean('verified').notNull().default(false),
	jsonb: json<string[]>('jsonb'),
	createdAt: timestamp('created_at', { fsp: 2 }).notNull().defaultNow(),
});
```

----------------------------------------

TITLE: Generating Turso Database Auth Token
DESCRIPTION: Command to create a new non-expiring authentication token for the Turso database.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/examples/libsql/README.md#2025-04-11_snippet_9

LANGUAGE: bash
CODE:
```
turso db tokens create drizzle-example
```

----------------------------------------

TITLE: Cloning Drizzle ORM Repository
DESCRIPTION: Git commands to clone the Drizzle ORM repository and navigate to the project directory.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/CONTRIBUTING.md#2025-04-11_snippet_2

LANGUAGE: bash
CODE:
```
git clone https://github.com/drizzle-team/drizzle-orm.git
cd drizzle-orm
```

----------------------------------------

TITLE: Performing SELECT Queries with Filtering and Sorting in Drizzle ORM SQLite
DESCRIPTION: Demonstrates how to execute SELECT queries with filtering conditions (eq, and, or), pagination (limit, offset), sorting (orderBy), and partial field selection in Drizzle ORM with SQLite.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/drizzle-orm/src/sqlite-core/README.md#2025-04-11_snippet_9

LANGUAGE: typescript
CODE:
```
...
import { sqliteTable, text, integer } from 'drizzle-orm/sqlite-core';
import { and, asc, desc, eq, or } from 'drizzle-orm'
import { drizzle } from 'drizzle-orm/better-sqlite3';
import Database from 'better-sqlite3';

const users = sqliteTable('users', {
  id: integer('id').primaryKey(),
  name: text('full_name'),
});

const sqlite = new Database('sqlite.db');
const db = drizzle(sqlite);

db.select().from(users).all();
db.select().from(users).where(eq(users.id, 42)).get();

// you can combine filters with and(...) or or(...)
db.select().from(users).where(and(eq(users.id, 42), eq(users.name, 'Dan'))).all();

db.select().from(users).where(or(eq(users.id, 42), eq(users.id, 1))).all();

// partial select
const result = db
  .select({
    field1: users.id,
    field2: users.name,
  })
  .from(users)
  .all();
const { field1, field2 } = result[0];

// limit offset & order by
db.select().from(users).limit(10).offset(10).all();
db.select().from(users).orderBy(users.name).all();
db.select().from(users).orderBy(desc(users.name)).all();
// you can pass multiple order args
db.select().from(users).orderBy(asc(users.name), desc(users.name)).all();
```

----------------------------------------

TITLE: Configuring Seed Count for Drizzle ORM
DESCRIPTION: Shows how to customize the number of entities created by the seed function. By default it creates 10, but this can be increased to create larger datasets for testing.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-seed/0.1.1.md#2025-04-11_snippet_1

LANGUAGE: typescript
CODE:
```
await seed(db, schema, { count: 1000 });
```

----------------------------------------

TITLE: Configuring MySQL2 Driver Mode for PlanetScale in Drizzle ORM
DESCRIPTION: Example showing how to configure the MySQL2 driver with the appropriate mode for PlanetScale compatibility in Drizzle ORM. This is required as PlanetScale doesn't support the lateral joins used by default in relational queries.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.28.0.md#2025-04-11_snippet_1

LANGUAGE: typescript
CODE:
```
import { drizzle } from 'drizzle-orm/mysql2';
import mysql from 'mysql2/promise';
import * as schema from './schema';

const connection = await mysql.createConnection({
  uri: process.env.PLANETSCALE_DATABASE_URL,
});

const db = drizzle(connection, { schema, mode: 'planetscale' });
```

----------------------------------------

TITLE: Defining Custom Text Type in MySQL
DESCRIPTION: Creates a custom Text type for MySQL. This type is used for storing variable-length character strings.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/docs/custom-types.lite.md#2025-04-11_snippet_7

LANGUAGE: typescript
CODE:
```
const customText = customType<{ data: string }>({
  dataType() {
    return 'text';
  },
});
```

----------------------------------------

TITLE: Drizzle Config Migration - Before (SQLite) - TypeScript
DESCRIPTION: Previous configuration format for SQLite and Turso users showing the common dialect configuration.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-kit/0.25.0.md#2025-04-11_snippet_1

LANGUAGE: typescript
CODE:
```
import { defineConfig } from "drizzle-kit";

export default defineConfig({
  dialect: "sqlite",
  schema: "./schema.ts",
  out: "./drizzle",
  dbCredentials: {
    url: "database.db",
  },
  breakpoints: true,
  verbose: true,
  strict: true,
});
```

----------------------------------------

TITLE: Legacy Count Query Implementation in Drizzle ORM
DESCRIPTION: The previous approach to counting entities in a database table using SQL count(*) template. This method requires manual SQL and array destructuring to get the count value.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.34.0.md#2025-04-11_snippet_14

LANGUAGE: typescript
CODE:
```
const res = await db.select({ count: sql`count(*)` }).from(users);
const count = res[0].count;
```

----------------------------------------

TITLE: Generated SQL for UPDATE FROM Query
DESCRIPTION: The SQL that Drizzle ORM generates from the TypeScript UPDATE...FROM query. It updates the city_id column in the users table using values from the cities table, with parameters for 'Seattle' and 'John'.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.36.3.md#2025-04-11_snippet_1

LANGUAGE: sql
CODE:
```
update "users" set "city_id" = "cities"."id" 
from "cities" 
where ("cities"."name" = $1 and "users"."name" = $2)

-- params: [ 'Seattle', 'John' ]
```

----------------------------------------

TITLE: Generated SQL for WITH DELETE Statement
DESCRIPTION: Shows the SQL generated by Drizzle ORM when using a WITH clause with a DELETE statement. The SQL creates a common table expression for the average order amount, then deletes orders exceeding that average.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.29.5.md#2025-04-11_snippet_1

LANGUAGE: sql
CODE:
```
with "average_amount" as (select avg("amount") as "value" from "orders") 
delete from "orders" 
where "orders"."amount" > (select * from "average_amount") 
returning "id"
```

----------------------------------------

TITLE: SQLite Schema Declaration
DESCRIPTION: Example of declaring SQLite database schema with tables, foreign keys, and indexes.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/drizzle-orm/src/sqlite-core/README.md#2025-04-11_snippet_3

LANGUAGE: typescript
CODE:
```
import { sqliteTable, text, integer, uniqueIndex } from 'drizzle-orm/sqlite-core';

export const countries = sqliteTable('countries', {
    id: integer('id').primaryKey(),
    name: text('name'),
  }, (countries) => ({
    nameIdx: uniqueIndex('nameIdx').on(countries.name),
  })
);

export const cities = sqliteTable('cities', {
  id: integer('id').primaryKey(),
  name: text('name'),
  countryId: integer('country_id').references(() => countries.id),
})
```

----------------------------------------

TITLE: Configuring PlanetScale Client Connection
DESCRIPTION: Shows the recommended way to establish a connection to PlanetScale database using Client instance instead of connect(). This is the new preferred method as connect() is being deprecated.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.29.4.md#2025-04-11_snippet_1

LANGUAGE: typescript
CODE:
```
import { Client } from '@planetscale/database';
import { drizzle } from 'drizzle-orm/planetscale-serverless';

// create the connection
const client = new Client({
	host: process.env['DATABASE_HOST'],
	username: process.env['DATABASE_USERNAME'],
	password: process.env['DATABASE_PASSWORD'],
});

const db = drizzle(client);
```

----------------------------------------

TITLE: Configuring SingleStore Dialect in Drizzle Kit
DESCRIPTION: Configuration for using the SingleStore dialect with Drizzle. This setup uses environment variables for database credentials and specifies output and schema locations.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-kit/0.29.0.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
import 'dotenv/config';
import { defineConfig } from 'drizzle-kit';

export default defineConfig({
  dialect: 'singlestore',
  out: './drizzle',
  schema: './src/db/schema.ts',
  dbCredentials: {
    url: process.env.DATABASE_URL!,
  },
});
```

----------------------------------------

TITLE: Fixed SQL Generation for defaultNow() Method in SQLite
DESCRIPTION: Shows the difference between previous and current SQL generation for the defaultNow() method. The fix adds parentheses around the timestamp calculation expression to ensure proper evaluation.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm-sqlite/0.14.3.md#2025-04-11_snippet_0

LANGUAGE: sql
CODE:
```
cast((julianday('now') - 2440587.5)*86400000 as integer)
```

LANGUAGE: sql
CODE:
```
(cast((julianday('now') - 2440587.5)*86400000 as integer))
```

----------------------------------------

TITLE: Migrating MySQL Import Paths in Drizzle ORM
DESCRIPTION: This shows the new import paths for MySQL-related modules after the migration to drizzle-orm from version 0.17.0. The examples demonstrate how to update imports for core MySQL functionality and mysql2.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.17.0.md#2025-04-11_snippet_1

LANGUAGE: typescript
CODE:
```
import { ... } from 'drizzle-orm/mysql-core'
```

LANGUAGE: typescript
CODE:
```
import { ... } from 'drizzle-orm/mysql2'
```

----------------------------------------

TITLE: Working with Views in Drizzle ORM and SQLite
DESCRIPTION: Demonstrates how to create and use views in Drizzle ORM with SQLite. It covers creating views using the query builder, using raw SQL, and describing existing views.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/drizzle-orm/src/sqlite-core/README.md#2025-04-11_snippet_26

LANGUAGE: typescript
CODE:
```
import { sqliteView } from 'drizzle-orm/sqlite-core';

const newYorkers = sqliteView('new_yorkers').as((qb) => qb.select().from(users).where(eq(users.cityId, 1)));
```

LANGUAGE: typescript
CODE:
```
import { queryBuilder as qb } from 'drizzle-orm/sqlite-core';

const newYorkers = sqliteView('new_yorkers').as(qb.select().from(users2Table).where(eq(users2Table.cityId, 1)));
```

LANGUAGE: typescript
CODE:
```
const newYorkers = sqliteView('new_yorkers', {
  id: integer('id').primaryKey(),
  name: text('name').notNull(),
  cityId: integer('city_id').notNull(),
}).as(sql`select * from ${users} where ${eq(users.cityId, 1)}`);
```

LANGUAGE: typescript
CODE:
```
const newYorkers = sqliteView('new_yorkers', {
  userId: integer('user_id').notNull(),
  cityId: integer('city_id'),
}).existing();
```

----------------------------------------

TITLE: Installing Dependencies and Running Script for Drizzle ORM with Bun:SQLite
DESCRIPTION: This shell command installs the necessary dependencies (mitata and drizzle-orm) using Bun package manager and runs the main script located at src/index.ts.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/examples/bun-sqlite/README.md#2025-04-11_snippet_0

LANGUAGE: shell
CODE:
```
bun install mitata drizzle-orm
bun run src/index.ts
```

----------------------------------------

TITLE: Introducing New Row Mapping Mechanism in Drizzle ORM
DESCRIPTION: A new row mapping mechanism called 'mapResultRowV2' has been added to drizzle-orm. This new method is intended to replace the existing 'mapResultRow' in future versions.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.12.0-beta.23.md#2025-04-11_snippet_0

LANGUAGE: markdown
CODE:
```
# drizzle-orm 0.12.0-beta.23

- Added new row mapping mechanism as `mapResultRowV2`, `mapResultRow` will be replaced by it in the future.
```

----------------------------------------

TITLE: Creating Update Schema for Database Queries in TypeScript
DESCRIPTION: Shows the usage of the new createUpdateSchema function for creating schemas used in update queries. It demonstrates how to create and use an update schema for a users table.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-zod/0.6.0.md#2025-04-11_snippet_1

LANGUAGE: typescript
CODE:
```
import { pgTable, text, integer } from 'drizzle-orm/pg-core';
import { createUpdateSchema } from 'drizzle-zod';

const users = pgTable('users', {
  id: integer().generatedAlwaysAsIdentity().primaryKey(),
  name: text().notNull(),
  age: integer().notNull()
});

const userUpdateSchema = createUpdateSchema(users);

const user = { id: 5, name: 'John' };
const parsed: { name?: string | undefined, age?: number | undefined } = userUpdateSchema.parse(user); // Error: `id` is a generated column, it can't be updated

const user = { age: 35 };
const parsed: { name?: string | undefined, age?: number | undefined } = userUpdateSchema.parse(user); // Will parse successfully
await db.update(users).set(parsed).where(eq(users.name, 'Jane'));
```

----------------------------------------

TITLE: Configuring Drizzle ORM with Xata HTTP Driver
DESCRIPTION: Example of initializing Drizzle ORM with the Xata HTTP driver using a generated Xata client. The code shows how to connect to Xata and perform a basic select query.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.30.4.md#2025-04-11_snippet_1

LANGUAGE: typescript
CODE:
```
import { drizzle } from 'drizzle-orm/xata-http';
import { getXataClient } from './xata'; // Generated client

const xata = getXataClient();
const db = drizzle(xata);

const result = await db.select().from(...);
```

----------------------------------------

TITLE: Optimizing Performance with Prepared Statements in Drizzle ORM and SQLite
DESCRIPTION: Illustrates how to use prepared statements and placeholders in Drizzle ORM with SQLite to improve query performance. This approach can lead to faster execution than using the native better-sqlite3 driver.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/drizzle-orm/src/sqlite-core/README.md#2025-04-11_snippet_27

LANGUAGE: typescript
CODE:
```
import { placeholder } from 'drizzle-orm';

const db = drizzle(...);

const q = db.select().from(customers).prepare();
q.all() // SELECT * FROM customers

const q = db.select().from(customers).where(eq(customers.id, placeholder('id'))).prepare()

q.get({ id: 10 }) // SELECT * FROM customers WHERE id = 10
q.get({ id: 12 }) // SELECT * FROM customers WHERE id = 12

const q = db
  .select()
  .from(customers)
  .where(sql`lower(${customers.name}) like ${placeholder('name')}`)
  .prepare();

q.all({ name: '%an%' }) // SELECT * FROM customers WHERE name ilike '%an%'
```

----------------------------------------

TITLE: Initializing Drizzle ORM with WebSocket-specific LibSQL Client
DESCRIPTION: Sets up a Drizzle ORM instance using the WebSocket-specific LibSQL client. This module supports ws and wss connection protocols.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.35.3.md#2025-04-11_snippet_4

LANGUAGE: typescript
CODE:
```
import { drizzle } from 'drizzle-orm/libsql/ws';

const db = drizzle({ connection: {
  url: process.env.DATABASE_URL, 
  authToken: process.env.DATABASE_AUTH_TOKEN 
}});
```

----------------------------------------

TITLE: Implementing Migrations with MySQL Proxy
DESCRIPTION: Shows how to handle database migrations using Drizzle ORM's MySQL Proxy migrator. This implementation sends migration queries to a proxy server, which is responsible for executing them in a transaction.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/examples/mysql-proxy/README.md#2025-04-11_snippet_1

LANGUAGE: typescript
CODE:
```
import axios from 'axios';
import { migrate } from 'drizzle-orm/mysql-proxy/migrator';

await migrate(db, async (queries) => {
  try {
    await axios.post('http://localhost:3000/migrate', { queries });
  } catch (e) {
    console.log(e);
    throw Error('Proxy server cannot run migrations');
  }
}, { migrationsFolder: 'drizzle' });
```

----------------------------------------

TITLE: Performing Partial Field Select in Joins with Drizzle ORM and SQLite
DESCRIPTION: Demonstrates how to perform a join operation between Cities and Users tables while selecting only specific fields from each table in the result.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/drizzle-orm/src/sqlite-core/README.md#2025-04-11_snippet_23

LANGUAGE: typescript
CODE:
```
db
  .select({
    id: cities.id,
    cityName: cities.name,
    userId: users.id
  })
  .from(cities)
  .leftJoin(users, eq(users.cityId, cities.id))
  .all();
```

----------------------------------------

TITLE: Initializing Drizzle ORM with SQLite3-specific LibSQL Client
DESCRIPTION: Sets up a Drizzle ORM instance using the SQLite3-specific LibSQL client. This module supports :memory: and file connection protocols, imported from the WASM path.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.35.3.md#2025-04-11_snippet_5

LANGUAGE: typescript
CODE:
```
import { drizzle } from 'drizzle-orm/libsql/wasm';

const db = drizzle({ connection: {
  url: process.env.DATABASE_URL, 
  authToken: process.env.DATABASE_AUTH_TOKEN 
}});
```

----------------------------------------

TITLE: Implementing Default Functions in MySQL Table Definition
DESCRIPTION: Demonstrates how to use the new $defaultFn() method to specify runtime default values for columns, showing integration with external libraries like cuid2 for ID generation.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.28.3.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
import { varchar, mysqlTable } from "drizzle-orm/mysql-core";
import { createId } from '@paralleldrive/cuid2';

const table = mysqlTable('table', {
	id: varchar('id', { length: 128 }).$defaultFn(() => createId()),
});
```

----------------------------------------

TITLE: Installing Drizzle ORM and Expo SQLite
DESCRIPTION: Command to install the required packages for using Drizzle ORM with Expo SQLite.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.29.2.md#2025-04-11_snippet_1

LANGUAGE: bash
CODE:
```
npm install drizzle-orm expo-sqlite@next
```

----------------------------------------

TITLE: Implementing Type Maps in Drizzle ORM Tables
DESCRIPTION: Demonstrates how to access type information from table definitions using the new _ property, allowing type extraction for columns and insert operations
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.23.0.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
const users = mysqlTable('users', {
  id: int('id').primaryKey(),
  name: text('name').notNull(),
});

type UserFields = typeof users['_']['columns'];
type InsertUser = typeof users['_']['model']['insert'];
```

----------------------------------------

TITLE: Complete Table Definition with MySQL Enums in Drizzle ORM
DESCRIPTION: This example shows a complete table definition that uses MySQL enums in different configurations: required without default, optional with default, and required with default.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm-mysql/0.15.1.md#2025-04-11_snippet_5

LANGUAGE: typescript
CODE:
```
const tableWithEnums = mysqlTable('enums_test_case', {
	id: serial('id').primaryKey(),
	enum1: mysqlEnum('enum1', ['a', 'b', 'c']).notNull(),
	enum2: mysqlEnum('enum2', ['a', 'b', 'c']).default('a'),
	enum3: mysqlEnum('enum3', ['a', 'b', 'c']).notNull().default('b'),
});
```

----------------------------------------

TITLE: Defining Drizzle Table Schema (Previous Method)
DESCRIPTION: Previous method of defining a table schema in Drizzle ORM, explicitly specifying column names.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.34.0.md#2025-04-11_snippet_9

LANGUAGE: typescript
CODE:
```
import { boolean, pgTable, text, uuid } from "drizzle-orm/pg-core";
  
export const ingredients = pgTable("ingredients", {
  id: uuid("id").defaultRandom().primaryKey(),
  name: text("name").notNull(),
  description: text("description"),
  inStock: boolean("in_stock").default(true),
});
```

----------------------------------------

TITLE: Retrieving Turso Database URL
DESCRIPTION: Command to get the URL of the Turso database using the Turso CLI.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/examples/libsql/README.md#2025-04-11_snippet_7

LANGUAGE: bash
CODE:
```
turso db show drizzle-example --url
```

----------------------------------------

TITLE: Defining Composite Primary Keys in MySQL with Drizzle ORM
DESCRIPTION: Shows how to define a table with a composite primary key in MySQL using Drizzle ORM.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.21.0.md#2025-04-11_snippet_3

LANGUAGE: typescript
CODE:
```
import { primaryKey } from 'drizzle-orm/mysql-core';

export const cpkTable = mysqlTable('table', {
  simple: int('simple'),
  columnNotNull: int('column_not_null').notNull(),
  columnDefault: int('column_default').default(100),
}, (table) => ({
  cpk: primaryKey(table.simple, table.columnDefault),
}));
```

----------------------------------------

TITLE: Defining Custom JSON Type in MySQL
DESCRIPTION: Creates a custom JSON type for MySQL. This type allows storing and retrieving JSON data, with automatic serialization to string.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/docs/custom-types.lite.md#2025-04-11_snippet_9

LANGUAGE: typescript
CODE:
```
const customJson = <TData>(name: string) =>
  customType<{ data: TData; driverData: string }>({
    dataType() {
      return 'json';
    },
    toDriver(value: TData): string {
      return JSON.stringify(value);
    },
  })(name);
```

----------------------------------------

TITLE: Importing Migration Functionality in drizzle-orm-sqlite
DESCRIPTION: Shows the new separate import path for migration functionality in drizzle-orm-sqlite package. Migration functionality has been separated to a dedicated module within the package.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm-sqlite/0.14.1.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
import { migrate } from 'drizzle-orm-sqlite/better-sqlite3/migrate';
```

----------------------------------------

TITLE: Initializing Drizzle ORM with Connection String or Config
DESCRIPTION: The new API pattern for initializing Drizzle with various connection options. Supports direct connection string, connection object, or configuration with additional options like logger and schema.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.35.0.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
import { drizzle } from "drizzle-orm/node-postgres";

const db = drizzle(process.env.DATABASE_URL);
// or
const db = drizzle({
  connection: process.env.DATABASE_URL
});
const db = drizzle({
  connection: {
    user: "...",
    password: "...",
    host: "...",
    port: 4321,
    db: "...",
  },
});

// if you need to pass logger or schema
const db = drizzle({
  connection: process.env.DATABASE_URL,
  logger: true,
  schema: schema,
});
```

----------------------------------------

TITLE: Initializing Drizzle with Expo SQLite
DESCRIPTION: Example of how to initialize and use Drizzle ORM with Expo SQLite. Shows different ways to execute queries.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.29.2.md#2025-04-11_snippet_2

LANGUAGE: typescript
CODE:
```
import { drizzle } from "drizzle-orm/expo-sqlite";
import { openDatabaseSync } from "expo-sqlite/next";

const expoDb = openDatabaseSync("db.db");

const db = drizzle(expoDb);

await db.select().from(...)...

// or

db.select().from(...).then(...);

// or

db.select().from(...).all();
```

----------------------------------------

TITLE: MySQL and SingleStore Column Type Updates
DESCRIPTION: Updates to varchar, binary, and varbinary column type handling in MySQL and SingleStore implementations.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.41.0.md#2025-04-11_snippet_1

LANGUAGE: sql
CODE:
```
varchar
binary
varbinary
```

----------------------------------------

TITLE: Using MySQL $returningId() function with auto-incrementing primary keys
DESCRIPTION: Demonstrates how to use the new $returningId() function in MySQL to automatically retrieve all inserted IDs when performing insert operations with auto-incrementing primary keys.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.32.0.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
import { boolean, int, text, mysqlTable } from 'drizzle-orm/mysql-core';

const usersTable = mysqlTable('users', {
  id: int('id').primaryKey(),
  name: text('name').notNull(),
  verified: boolean('verified').notNull().default(false),
});


const result = await db.insert(usersTable).values([{ name: 'John' }, { name: 'John1' }]).$returningId();
//    ^? { id: number }[]
```

----------------------------------------

TITLE: Defining Drizzle Table Schema (New Method)
DESCRIPTION: New method of defining a table schema in Drizzle ORM, using a callback function and omitting unnecessary column names.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.34.0.md#2025-04-11_snippet_10

LANGUAGE: typescript
CODE:
```
import { pgTable } from "drizzle-orm/pg-core";

export const ingredients = pgTable("ingredients", (t) => ({
  id: t.uuid().defaultRandom().primaryKey(),
  name: t.text().notNull(),
  description: t.text(),
  inStock: t.boolean("in_stock").default(true),
}));
```

----------------------------------------

TITLE: Grouped Fields Result Type - TypeScript
DESCRIPTION: Shows the TypeScript type for the grouped fields query, where the entire user object becomes nullable while its non-null fields remain non-nullable.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/docs/joins.md#2025-04-11_snippet_5

LANGUAGE: typescript
CODE:
```
{
  cityId: number;
  cityName: string;
  user: {
    id: number;
    firstName: string;
    lastName: string | null;
  } | null;
}
```

----------------------------------------

TITLE: Initializing Drizzle ORM with Default LibSQL Client
DESCRIPTION: Sets up a Drizzle ORM instance using the default @libsql/client module which automatically adapts between Node.js and web environments based on the bundler target.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.35.3.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
import { drizzle } from 'drizzle-orm/libsql';

const db = drizzle({ connection: {
  url: process.env.DATABASE_URL, 
  authToken: process.env.DATABASE_AUTH_TOKEN 
}});
```

----------------------------------------

TITLE: Specifying Custom Names for Primary and Foreign Keys
DESCRIPTION: This code snippet demonstrates how to specify custom names for primary keys and foreign keys in Drizzle ORM, addressing the issue of constraint names exceeding database character limits.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.29.0.md#2025-04-11_snippet_2

LANGUAGE: typescript
CODE:
```
const table = pgTable('table', {
  id: integer('id'),
  name: text('name'),
}, (table) => ({
  cpk: primaryKey({ name: 'composite_key', columns: [table.id, table.name] }),
  cfk: foreignKey({
    name: 'fkName',
    columns: [table.id],
    foreignColumns: [table.name],
  }),
}));
```

----------------------------------------

TITLE: Implementing SQL Aggregate Functions in TypeScript
DESCRIPTION: Examples of using Drizzle's new aggregate function helpers like count, avg, sum, max, and min with equivalent SQL template syntax
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.29.1.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
await db.select({ value: count() }).from(users);
await db.select({ value: count(users.id) }).from(users);

// It's equivalent to writing
await db.select({ 
  value: sql`count('*'))`.mapWith(Number) 
}).from(users);
await db.select({ 
  value: sql`count(${users.id})`.mapWith(Number) 
}).from(users);
```

----------------------------------------

TITLE: Generated SQL for Views
DESCRIPTION: Shows the SQL generated from the DrizzleORM view definitions, including table creation, regular view, and materialized view creation statements.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-kit/0.26.0.md#2025-04-11_snippet_3

LANGUAGE: sql
CODE:
```
CREATE TABLE IF NOT EXISTS "users" (
  "id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
  "username" text NOT NULL,
  "age" integer,
  CONSTRAINT "age_check" CHECK ("users"."age" > 21)
);

CREATE VIEW "public"."simple_users_view" AS (select "id", "username", "age" from "users");

CREATE MATERIALIZED VIEW "public"."materialized_users_view" AS (select "id", "username", "age" from "users");
```

----------------------------------------

TITLE: Initializing Drizzle ORM with Multiple Schema Files in TypeScript
DESCRIPTION: This snippet demonstrates how to initialize Drizzle ORM with multiple schema files. It shows importing schemas from different files and combining them when creating the database instance.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.26.0.md#2025-04-11_snippet_2

LANGUAGE: typescript
CODE:
```
import * as schema1 from './schema1';
import * as schema2 from './schema2';
import { drizzle } from 'drizzle-orm/...';

const db = drizzle(client, { schema: { ...schema1, ...schema2 } });

await db.query.users.findMany(...);
```

----------------------------------------

TITLE: Deprecated MySQL Enum Definition Approach in Drizzle ORM
DESCRIPTION: This example demonstrates the outdated way of defining MySQL enums in Drizzle ORM, which involved creating a separate enum definition and then referencing it when defining columns.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm-mysql/0.15.1.md#2025-04-11_snippet_4

LANGUAGE: typescript
CODE:
```
export const popularityEnum = mysqlEnum('popularity', ['unknown', 'known', 'popular']);
popularityEnum('column_name');
```

----------------------------------------

TITLE: Using Dynamic Query Building in Drizzle ORM
DESCRIPTION: This example shows how to use the new dynamic mode for query builders in Drizzle ORM, allowing multiple invocations of methods like 'where()'.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.29.0.md#2025-04-11_snippet_1

LANGUAGE: typescript
CODE:
```
function withPagination<T extends PgSelect>(
  qb: T,
  page: number,
  pageSize: number = 10,
) {
  return qb.limit(pageSize).offset(page * pageSize);
}

const query = db.select().from(users).where(eq(users.id, 1));
withPagination(query, 1); // ❌ Type error - the query builder is not in dynamic mode

const dynamicQuery = query.$dynamic();
withPagination(dynamicQuery, 1); // ✅ OK
```

----------------------------------------

TITLE: Defining Indexes, Foreign Keys and Composite Primary Keys in SQLite with Drizzle ORM
DESCRIPTION: Shows how to define various table constraints including indexes, unique indexes, foreign keys (including self-referencing), and composite primary keys in SQLite schema using Drizzle ORM.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/drizzle-orm/src/sqlite-core/README.md#2025-04-11_snippet_8

LANGUAGE: typescript
CODE:
```
import { sqliteTable, foreignKey, primaryKey, text, integer, index, uniqueIndex, AnySQLiteColumn } from "drizzle-orm/sqlite-core";

export const countries = sqliteTable('countries', {
    id: integer('id').primaryKey(),
    name: text('name'),
    population: integer('population'),
    capital: integer('capital').references(() => cities.id, { onUpdate: 'cascade', onDelete: 'cascade' })
  }, (countries) => ({
    nameIdx: index('name_idx').on(countries.name), // one column
    namePopulationIdx: index('name_population_idx').on(countries.name, countries.population), // multiple columns
    uniqueIdx: uniqueIndex('unique_idx').on(countries.name), // unique index
  })
);

export const cities = sqliteTable('cities', {
  id: integer('id').primaryKey(),
  name: text('name'),
  countryId: integer('country_id').references(() => countries.id), // inline foreign key
  countryName: text('country_id'),
  sisterCityId: integer('sister_city_id').references((): AnySQLiteColumn => cities.id), // self-referencing foreign key
}, (cities) => ({
  // explicit foreign key with 1 column
  countryFk: foreignKey(() => ({
    columns: [cities.countryId],
    foreignColumns: [countries.id],
  })),
  // explicit foreign key with multiple columns
  countryIdNameFk: foreignKey(() => ({
    columns: [cities.countryId, cities.countryName],
    foreignColumns: [countries.id, countries.name],
  })),
}));

const pkExample = sqliteTable('pk_example', {
  id: integer('id'),
  name: text('name').notNull(),
  email: text('email').notNull(),
}, (pkExample) => ({
  // composite primary key on multiple columns
  compositePk: primaryKey(pkExample.id, pkExample.name)
}));

// you can have .where() on indexes
index('name_idx').on(table.column).where(sql``)
```

----------------------------------------

TITLE: Initializing Drizzle ORM with Web-specific LibSQL Client
DESCRIPTION: Sets up a Drizzle ORM instance using the web-specific LibSQL client, designed for fullstack web frameworks like Next.js, Nuxt, Astro, etc.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.35.3.md#2025-04-11_snippet_2

LANGUAGE: typescript
CODE:
```
import { drizzle } from 'drizzle-orm/libsql/web';

const db = drizzle({ connection: {
  url: process.env.DATABASE_URL, 
  authToken: process.env.DATABASE_AUTH_TOKEN 
}});
```

----------------------------------------

TITLE: Configuring Schema Paths with Glob Patterns in Drizzle Config
DESCRIPTION: Example of using glob patterns to specify schema paths in the Drizzle configuration file.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.21.0.md#2025-04-11_snippet_11

LANGUAGE: plaintext
CODE:
```
{
  "out: "./migrations", 
  "schema": ["./core/**/*.ts", "./database/schema.ts"]
}
```

----------------------------------------

TITLE: Version Header in Markdown
DESCRIPTION: Markdown header showing the package name and version number for the release notes
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm-pg/0.15.2.md#2025-04-11_snippet_0

LANGUAGE: markdown
CODE:
```
# drizzle-orm-pg 0.15.2
```

----------------------------------------

TITLE: Configuring Casing Strategy in Drizzle ORM Connection
DESCRIPTION: Setting up a Drizzle ORM database connection with the new casing parameter set to snake_case, which ensures automatic mapping between camelCase TypeScript properties and snake_case database columns.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.34.0.md#2025-04-11_snippet_12

LANGUAGE: typescript
CODE:
```
const db = await drizzle('node-postgres', { connection: '', casing: 'snake_case' })
```

----------------------------------------

TITLE: Connecting to Planetscale Serverless with Drizzle ORM in TypeScript
DESCRIPTION: Example showing how to connect to a Planetscale Serverless database using Drizzle ORM. The code demonstrates importing the necessary packages, creating a connection with environment variables, and initializing the Drizzle instance.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.17.5.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
import { drizzle } from 'drizzle-orm/planetscale-serverless';
import { connect } from '@planetscale/database';

// create the connection
const connection = connect({
  host: process.env['DATABASE_HOST'],
  username: process.env['DATABASE_USERNAME'],
  password: process.env['DATABASE_PASSWORD'],
});

const db = drizzle(connection);
```

----------------------------------------

TITLE: Implementing SELECT FOR Locking Clauses in MySQL with Drizzle ORM
DESCRIPTION: Shows how to use locking clauses with SELECT statements in MySQL using Drizzle ORM. Includes examples of FOR UPDATE and FOR SHARE with options like skipLocked and noWait.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.20.3.md#2025-04-11_snippet_1

LANGUAGE: typescript
CODE:
```
await db.select().from(users).for('update');
await db.select().from(users).for('share', { skipLocked: true });
await db.select().from(users).for('update', { noWait: true });
```

----------------------------------------

TITLE: Implementing MySQL Proxy Driver in Drizzle ORM
DESCRIPTION: This code demonstrates how to implement a custom HTTP driver for MySQL using Drizzle ORM's new proxy driver feature, including query execution and migration handling.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.29.0.md#2025-04-11_snippet_5

LANGUAGE: typescript
CODE:
```
import axios from 'axios';
import { eq } from 'drizzle-orm/expressions';
import { drizzle } from 'drizzle-orm/mysql-proxy';
import { migrate } from 'drizzle-orm/mysql-proxy/migrator';
import { cities, users } from './schema';

async function main() {
  const db = drizzle(async (sql, params, method) => {
    try {
      const rows = await axios.post(`${process.env.REMOTE_DRIVER}/query`, {
        sql,
        params,
        method,
      });

      return { rows: rows.data };
    } catch (e: any) {
      console.error('Error from pg proxy server:', e.response.data);
      return { rows: [] };
    }
  });

  await migrate(db, async (queries) => {
    try {
      await axios.post(`${process.env.REMOTE_DRIVER}/migrate`, { queries });
    } catch (e) {
      console.log(e);
      throw new Error('Proxy server cannot run migrations');
    }
  }, { migrationsFolder: 'drizzle' });

  await db.insert(cities).values({ id: 1, name: 'name' });

  await db.insert(users).values({
    id: 1,
    name: 'name',
    email: 'email',
    cityId: 1,
  });

  const usersToCityResponse = await db.select().from(users).leftJoin(
    cities,
    eq(users.cityId, cities.id),
  );
}
```

----------------------------------------

TITLE: Initializing Drizzle ORM with Schema in TypeScript
DESCRIPTION: This snippet shows how to initialize Drizzle ORM with a schema. It demonstrates importing the schema and using the 'drizzle' function to create a database instance.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.26.0.md#2025-04-11_snippet_1

LANGUAGE: typescript
CODE:
```
import * as schema from './schema';
import { drizzle } from 'drizzle-orm/...';

const db = drizzle(client, { schema });

await db.query.users.findMany(...);
```

----------------------------------------

TITLE: Using Placeholders in Pagination Methods with Drizzle ORM in TypeScript
DESCRIPTION: This code demonstrates how to use placeholders in `.limit()` and `.offset()` methods when creating prepared statements with Drizzle ORM. It allows for dynamic pagination values to be provided at execution time rather than when the query is prepared.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.24.5.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
const stmt = db
  .select({
    id: usersTable.id,
    name: usersTable.name,
  })
  .from(usersTable)
  .limit(placeholder('limit'))
  .offset(placeholder('offset'))
  .prepare('stmt');

const result = await stmt.execute({ limit: 1, offset: 1 });
```

----------------------------------------

TITLE: Previous WITH Clause Subquery Syntax in Drizzle ORM
DESCRIPTION: This shows the previous syntax for creating WITH clause subqueries in Drizzle ORM, using the prepareWithSubquery method to define a common table expression.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.22.0.md#2025-04-11_snippet_1

LANGUAGE: typescript
CODE:
```
const regionalSales = db
  .select({
    region: orders.region,
    totalSales: sql`sum(${orders.amount})`.as<number>('total_sales'),
})
.from(orders)
.groupBy(orders.region)
.prepareWithSubquery('regional_sales');

await db.with(regionalSales).select(...).from(...);
```

----------------------------------------

TITLE: CITEXT Type Usage Example
DESCRIPTION: Example showing how to use the custom CITEXT type in a table definition.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/docs/custom-types.md#2025-04-11_snippet_6

LANGUAGE: typescript
CODE:
```
const table = pgTable('table', {
  id: integer('id').primaryKey(),
  ciname: citext('ciname')
})
```

----------------------------------------

TITLE: Project Setup and Migration Commands
DESCRIPTION: Basic npm commands for installing dependencies, running the project locally, generating SQL migrations from schema, and applying migrations to the remote database.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/examples/neon-cloudflare/readme.md#2025-04-11_snippet_2

LANGUAGE: bash
CODE:
```
npm i

## run locally
npm start

## generate SQL migrations for schema.ts
npm run generate

## apply migrations to remote database
npm run migrate
```

----------------------------------------

TITLE: Executing D1 Batch API Operations with Drizzle ORM in TypeScript
DESCRIPTION: This snippet demonstrates how to use the D1 Batch API with Drizzle ORM. It includes various operations such as insert, update, query, and select, all executed in a single batch request.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.29.0.md#2025-04-11_snippet_7

LANGUAGE: typescript
CODE:
```
const batchResponse = await db.batch([
  db.insert(usersTable).values({ id: 1, name: 'John' }).returning({
    id: usersTable.id,
  }),
  db.update(usersTable).set({ name: 'Dan' }).where(eq(usersTable.id, 1)),
  db.query.usersTable.findMany({}),
  db.select().from(usersTable).where(eq(usersTable.id, 1)),
  db.select({ id: usersTable.id, invitedBy: usersTable.invitedBy }).from(
    usersTable,
  ),
]);
```

----------------------------------------

TITLE: Recommended MySQL Enum Definition in Drizzle ORM
DESCRIPTION: This example shows the preferred way to define MySQL enums in Drizzle ORM, defining them inline with column definitions and adding constraints like notNull and default directly to the enum definition.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm-mysql/0.15.1.md#2025-04-11_snippet_3

LANGUAGE: typescript
CODE:
```
mysqlEnum('popularity', ['unknown', 'known', 'popular']).notNull().default('known')
```

----------------------------------------

TITLE: Working with Subqueries in Drizzle ORM SQLite
DESCRIPTION: Demonstrates how to create and use subqueries in Drizzle ORM, including selecting from subqueries and using them in join operations with type safety maintained.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/drizzle-orm/src/sqlite-core/README.md#2025-04-11_snippet_13

LANGUAGE: typescript
CODE:
```
const sq = db.select().from(users).where(eq(users.id, 42)).as('sq');
const result = db.select().from(sq).all();
```

LANGUAGE: typescript
CODE:
```
const result = db.select().from(users).leftJoin(sq, eq(users.id, sq.id)).all();
```

----------------------------------------

TITLE: Connecting to Gel Database using Drizzle ORM and gel-js
DESCRIPTION: This snippet demonstrates how to connect to a Gel database using Drizzle ORM with the gel-js client. It imports necessary modules, creates a Gel client, initializes the Drizzle instance, and executes a simple query.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.40.0.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
// Make sure to install the 'gel' package 
import { drizzle } from "drizzle-orm/gel";
import { createClient } from "gel";

const gelClient = createClient();
const db = drizzle({ client: gelClient });

const result = await db.execute('select 1');
```

----------------------------------------

TITLE: Defining Custom Text Type in Drizzle ORM
DESCRIPTION: Shows how to create a custom text data type using the customType helper and apply it to a table column. The example demonstrates type safety through generic typing and table column definition.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm-pg/0.16.2.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
const customText = customType<{ data: string }>({
	dataType() {
		return 'text';
	},
});

const usersTable = pgTable('users', {
	name: customText('name').notNull(),
});
```

----------------------------------------

TITLE: Enabling Query Logging in Drizzle ORM
DESCRIPTION: This snippet demonstrates how to enable query logging in Drizzle ORM using the new shorthand syntax. The `{ logger: true }` option can be passed to the `drizzle()` function to activate logging.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.20.1.md#2025-04-11_snippet_0

LANGUAGE: markdown
CODE:
```
{ logger: true }
```

----------------------------------------

TITLE: Using WITH Clause in Drizzle ORM SQLite Queries
DESCRIPTION: Shows how to use the WITH clause to create common table expressions (CTEs) in Drizzle ORM SQLite queries, including proper field aliasing to maintain type safety.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/drizzle-orm/src/sqlite-core/README.md#2025-04-11_snippet_12

LANGUAGE: typescript
CODE:
```
const sq = db.$with('sq').as(db.select().from(users).where(eq(users.id, 42)));
const result = db.with(sq).select().from(sq).all();
```

LANGUAGE: typescript
CODE:
```
const sq = db.$with('sq').as(db.select({ name: sql<string>`upper(${users.name})`.as('name') }).from(users));
const result = db.with(sq).select({ name: sq.name }).from(sq).all();
```

----------------------------------------

TITLE: Applying FORCE INDEX Hint in MySQL Queries with Drizzle ORM
DESCRIPTION: This code demonstrates the FORCE INDEX hint implementation in Drizzle ORM. It forces the MySQL optimizer to use the specified index for the query and prevents fallback to other indexes, potentially resulting in a full table scan if the specified index cannot be used.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.38.2.md#2025-04-11_snippet_2

LANGUAGE: typescript
CODE:
```
export const users = mysqlTable('users', {
  id: int('id').primaryKey(),
  name: varchar('name', { length: 100 }).notNull(),
}, () => [usersTableNameIndex]);

const usersTableNameIndex = index('users_name_index').on(users.name);

await db.select()
  .from(users, { forceIndex: usersTableNameIndex })
  .where(eq(users.name, 'David'));
```

----------------------------------------

TITLE: Generated SQL for Check Constraint
DESCRIPTION: Shows the SQL generated from the DrizzleORM check constraint definition. Creates a users table with primary key, required fields, and an age check constraint.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-kit/0.26.0.md#2025-04-11_snippet_1

LANGUAGE: sql
CODE:
```
CREATE TABLE IF NOT EXISTS "users" (
  "id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
  "username" text NOT NULL,
  "age" integer,
  CONSTRAINT "age_check" CHECK ("users"."age" > 21)
);
```

----------------------------------------

TITLE: Previous Foreign Key Definition Approach in Drizzle ORM
DESCRIPTION: This snippet shows the old way of defining foreign keys in Drizzle ORM before version 0.15.1. It uses a callback function inside the foreignKey method to specify columns and foreign columns.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm-mysql/0.15.1.md#2025-04-11_snippet_1

LANGUAGE: typescript
CODE:
```
export const usersTable = mysqlTable('userstest', {
	id: serial('id').primaryKey(),
	homeCity: text('name').notNull(),
	createdAt: timestamp('created_at', { fsp: 2 }).notNull().defaultNow(),
}, (users) => ({
	// foreignKey has a callback as param
	usersCityFK: foreignKey(() => { columns: [users.homeCity], foreignColumns: [cities.id] }),
}));
```

----------------------------------------

TITLE: Implementing IGNORE INDEX Hint in MySQL Queries with Drizzle ORM
DESCRIPTION: This example shows how to use the IGNORE INDEX hint in Drizzle ORM to tell the MySQL optimizer to avoid using a specific index. The query will consider all other indexes or perform a full table scan if necessary when looking up users by name.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.38.2.md#2025-04-11_snippet_1

LANGUAGE: typescript
CODE:
```
export const users = mysqlTable('users', {
  id: int('id').primaryKey(),
  name: varchar('name', { length: 100 }).notNull(),
}, () => [usersTableNameIndex]);

const usersTableNameIndex = index('users_name_index').on(users.name);

await db.select()
  .from(users, { ignoreIndex: usersTableNameIndex })
  .where(eq(users.name, 'David'));
```

----------------------------------------

TITLE: Using USE INDEX Hint in MySQL Queries with Drizzle ORM
DESCRIPTION: This snippet demonstrates how to apply the USE INDEX hint in a MySQL query using Drizzle ORM. It creates a users table with an index on the name column, then performs a select query that suggests the optimizer use this specific index when filtering by name.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.38.2.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
export const users = mysqlTable('users', {
  id: int('id').primaryKey(),
  name: varchar('name', { length: 100 }).notNull(),
}, () => [usersTableNameIndex]);

const usersTableNameIndex = index('users_name_index').on(users.name);

await db.select()
  .from(users, { useIndex: usersTableNameIndex })
  .where(eq(users.name, 'David'));
```

----------------------------------------

TITLE: Creating MySQL Generated Columns with stored and virtual modes
DESCRIPTION: Shows how to define MySQL generated columns with different storage modes (stored or virtual) using SQL expressions that reference other columns in the table.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/changelogs/drizzle-orm/0.32.0.md#2025-04-11_snippet_6

LANGUAGE: typescript
CODE:
```
export const users = mysqlTable("users", {
  id: int("id"),
  id2: int("id2"),
  name: text("name"),
  generatedName: text("gen_name").generatedAlwaysAs(
    (): SQL => sql`${schema2.users.name} || 'hello'`,
    { mode: "stored" }
  ),
  generatedName1: text("gen_name1").generatedAlwaysAs(
    (): SQL => sql`${schema2.users.name} || 'hello'`,
    { mode: "virtual" }
  ),
}),
```

----------------------------------------

TITLE: Mixing Table and Column Selection - TypeScript
DESCRIPTION: Demonstrates how to select all fields from one table while selecting specific fields from another table using a shorthand syntax.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/docs/joins.md#2025-04-11_snippet_10

LANGUAGE: typescript
CODE:
```
.select({
  cities, // shorthand for "cities: cities", the key can be anything
  user: {
    firstName: users.firstName,
  },
})
```

----------------------------------------

TITLE: Setting up Drizzle ORM with MySQL Proxy via HTTP
DESCRIPTION: Demonstrates how to initialize Drizzle ORM with MySQL Proxy driver using axios for HTTP communication. This example shows the implementation of the database instance that forwards SQL queries to a proxy server and handles the response.
SOURCE: https://github.com/drizzle-team/drizzle-orm/blob/main/examples/mysql-proxy/README.md#2025-04-11_snippet_0

LANGUAGE: typescript
CODE:
```
import axios from 'axios';
import { drizzle } from 'drizzle-orm/mysql-proxy';

const db = drizzle(async (sql, params, method) => {
  try {
    const rows = await axios.post('http://localhost:3000/query', {
      sql,
      params,
      method,
    });

    return { rows: rows.data };
  } catch (e: any) {
    console.error('Error from mysql proxy server: ', e.response.data);
    return { rows: [] };
  }
});
```